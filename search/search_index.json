{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyautogit A command line interface for working with git written in python with the help of py_cui . Introduction The aim of pyautogit is to introduce a simple command line interface for managing multiple git repositories from one workspace. Install pyautogit with pip : pip install pyautogit and start it from a command line either inside a git repository, or in any non-git repo. If you open a git repo, you will see a repository control screen, while otherwise a workspace will be created, and any git repositories found as subdirectories will be listed for control. From here, you can select a repository, or clone and create new ones. I hope pyautogit proves as useful for you as it has for me! Demo Below is a quick demo of using `pyautogit to do some common git actions.","title":"Home"},{"location":"#pyautogit","text":"A command line interface for working with git written in python with the help of py_cui .","title":"pyautogit"},{"location":"#introduction","text":"The aim of pyautogit is to introduce a simple command line interface for managing multiple git repositories from one workspace. Install pyautogit with pip : pip install pyautogit and start it from a command line either inside a git repository, or in any non-git repo. If you open a git repo, you will see a repository control screen, while otherwise a workspace will be created, and any git repositories found as subdirectories will be listed for control. From here, you can select a repository, or clone and create new ones. I hope pyautogit proves as useful for you as it has for me!","title":"Introduction"},{"location":"#demo","text":"Below is a quick demo of using `pyautogit to do some common git actions.","title":"Demo"},{"location":"about/","text":"About pyautogit Author(s) Jakub Wlodek - Creator, Maintainer Contributor(s) License BSD 3-Clause License Copyright (c) 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"About"},{"location":"about/#about-pyautogit","text":"","title":"About pyautogit"},{"location":"about/#authors","text":"Jakub Wlodek - Creator, Maintainer","title":"Author(s)"},{"location":"about/#contributors","text":"","title":"Contributor(s)"},{"location":"about/#license","text":"BSD 3-Clause License Copyright (c) 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"developers/","text":"pyautogit Developers This documentation section is dedicated to potentital developers of pyautogit . It outlines the classes and functions listed in the main modules included with the utility. These are autogenerated from the numpy-style docstrings found in the source code itself, by a utility script: npdoc2md . If you encounter an error with the doc generation, please make an issue on this utility's github page. Contributing to pyautogit I'll welcome anyone wanting to contribute to the development of pyautogit . If you wish to contribute to the core codebase of the utility, you may want to take a look at the developers page of the documentation . Before you create a pull request, here are some things to keep in mind: Make sure the unit tests pass If you make a pull request and Travis tells you a unit test failed, please fix the issue and append to the pull request. I will most likely only look closely at pull requests that don't show any issues with the CI. Use consistent numpy documentation The documentation building process for pyautogit depends on strict numpy-style documenatation. Please be consistent in format with the rest of the project. The Travis-CI will check if documentation can be auto-generated from the comments, and if this test fails I will not merge the pull request. You can locally run this test by running the following: cd docs/scripts bash generateFromDocstrings.sh If you get a Successfully Converted! message for each of the modules, the test succeeded. Use the fork-pull request model Please use the standard github fork-pull request model for contributions, preferably with creating branch names that reflect the feature or bugfix you are adding. Also, please describe what your pull request is doing when creating it, and if applicable, please add a link to any related issues or pull requests. Check the AUTHORS file If you'd like, add your name to the Contributing Authors section of the AUTHORS file. This way your name will appear in the project outside of the github environment.","title":"Introduction"},{"location":"developers/#pyautogit-developers","text":"This documentation section is dedicated to potentital developers of pyautogit . It outlines the classes and functions listed in the main modules included with the utility. These are autogenerated from the numpy-style docstrings found in the source code itself, by a utility script: npdoc2md . If you encounter an error with the doc generation, please make an issue on this utility's github page.","title":"pyautogit Developers"},{"location":"developers/#contributing-to-pyautogit","text":"I'll welcome anyone wanting to contribute to the development of pyautogit . If you wish to contribute to the core codebase of the utility, you may want to take a look at the developers page of the documentation . Before you create a pull request, here are some things to keep in mind:","title":"Contributing to pyautogit"},{"location":"developers/#make-sure-the-unit-tests-pass","text":"If you make a pull request and Travis tells you a unit test failed, please fix the issue and append to the pull request. I will most likely only look closely at pull requests that don't show any issues with the CI.","title":"Make sure the unit tests pass"},{"location":"developers/#use-consistent-numpy-documentation","text":"The documentation building process for pyautogit depends on strict numpy-style documenatation. Please be consistent in format with the rest of the project. The Travis-CI will check if documentation can be auto-generated from the comments, and if this test fails I will not merge the pull request. You can locally run this test by running the following: cd docs/scripts bash generateFromDocstrings.sh If you get a Successfully Converted! message for each of the modules, the test succeeded.","title":"Use consistent numpy documentation"},{"location":"developers/#use-the-fork-pull-request-model","text":"Please use the standard github fork-pull request model for contributions, preferably with creating branch names that reflect the feature or bugfix you are adding. Also, please describe what your pull request is doing when creating it, and if applicable, please add a link to any related issues or pull requests.","title":"Use the fork-pull request model"},{"location":"developers/#check-the-authors-file","text":"If you'd like, add your name to the Contributing Authors section of the AUTHORS file. This way your name will appear in the project outside of the github environment.","title":"Check the AUTHORS file"},{"location":"install/","text":"pyautogit Installation An obvious prerequisit to installing pyautogit is to have git installed an in your system path. Once this is done, you may install the module. To install pyautogit , it is recommended to use pip : pip install pyautogit This will also install py_cui , the Command Line UI builder library upon which the project is based, and windows-curses on windows systems, which is required for py_cui on windows machines. Alternatively, you can install from source. Clone this repository and use pip to install: git clone https://github.com/jwlodek/pyautogit cd pyautogit pip install . If pyautogit is already installed and you would like to update it, use: pip install --upgrade pyautogit or cd pyautogit git pull pip install --upgrade . if updating a local version. Note that you may require root access for installing with pip depending on your system's python configuration.","title":"Installation"},{"location":"install/#pyautogit-installation","text":"An obvious prerequisit to installing pyautogit is to have git installed an in your system path. Once this is done, you may install the module. To install pyautogit , it is recommended to use pip : pip install pyautogit This will also install py_cui , the Command Line UI builder library upon which the project is based, and windows-curses on windows systems, which is required for py_cui on windows machines. Alternatively, you can install from source. Clone this repository and use pip to install: git clone https://github.com/jwlodek/pyautogit cd pyautogit pip install . If pyautogit is already installed and you would like to update it, use: pip install --upgrade pyautogit or cd pyautogit git pull pip install --upgrade . if updating a local version. Note that you may require root access for installing with pip depending on your system's python configuration.","title":"pyautogit Installation"},{"location":"repo_control/","text":"Repository Control Screen This documentation page is incomplete, you could help by expanding it.","title":"Repo Control Screen"},{"location":"repo_control/#repository-control-screen","text":"This documentation page is incomplete, you could help by expanding it.","title":"Repository Control Screen"},{"location":"repo_select/","text":"Repository Selection Screen This documentation page is incomplete, you could help by expanding it.","title":"Repo Select Screen"},{"location":"repo_select/#repository-selection-screen","text":"This documentation page is incomplete, you could help by expanding it.","title":"Repository Selection Screen"},{"location":"usage/","text":"Usage Once pyautogit is installed, open a command line client (note that Windows Terminal is not supported), then navigate to a directory and type: pyautogit You can also specify an external directory: pyautogit -w /home/jwlodek/repos If you open pyautogit in a directory that contains a .git folder, it will treat it as a repository, while if it cannot find said folder, the target location will be treated as a workspace. Repository Screen From the repository screen, you manage the local opened repository. You may create commits, tags, push and pull, and manage branches. For more detailed information on using the Repository Screen, please check the documentation. Workspace Screen The workspace screen allows for managing multiple git repositories at once. From here, all subdirectories that are identified as git repositories are listed, and you may open their respectiver repository screens. Also, you may clone new repositories, as well as create new blank repositories. Credential Management When an action is performed that requires credentials (ex. git push), pyautogit will ask for your git remote username and password. These are then stored as environment variables for the running process, and are used with git askpass to perform operations. As a result, if you open an editor after credentials are entered (ex. VSCode), and use the integrated terminal to process git commands, you will not have to enter credentials again. Credentials are stored only for the duration the window is open, and must be re-entered after each restart.","title":"Basic Usage"},{"location":"usage/#usage","text":"Once pyautogit is installed, open a command line client (note that Windows Terminal is not supported), then navigate to a directory and type: pyautogit You can also specify an external directory: pyautogit -w /home/jwlodek/repos If you open pyautogit in a directory that contains a .git folder, it will treat it as a repository, while if it cannot find said folder, the target location will be treated as a workspace.","title":"Usage"},{"location":"usage/#repository-screen","text":"From the repository screen, you manage the local opened repository. You may create commits, tags, push and pull, and manage branches. For more detailed information on using the Repository Screen, please check the documentation.","title":"Repository Screen"},{"location":"usage/#workspace-screen","text":"The workspace screen allows for managing multiple git repositories at once. From here, all subdirectories that are identified as git repositories are listed, and you may open their respectiver repository screens. Also, you may clone new repositories, as well as create new blank repositories.","title":"Workspace Screen"},{"location":"usage/#credential-management","text":"When an action is performed that requires credentials (ex. git push), pyautogit will ask for your git remote username and password. These are then stored as environment variables for the running process, and are used with git askpass to perform operations. As a result, if you open an editor after credentials are entered (ex. VSCode), and use the integrated terminal to process git commands, you will not have to enter credentials again. Credentials are stored only for the duration the window is open, and must be re-entered after each restart.","title":"Credential Management"},{"location":"DocstringGenerated/Askpass/","text":"pyautogit pyautogit.askpass module This is an internal module meant to be used with pyautogit for git askpass git credential asking. The two files are included to differentiate windows and linux, where on linux we use the python3 shebang, on windows the python shebang (Hopefully with the death of python 2 we can only use one file)","title":"pyautogit"},{"location":"DocstringGenerated/Askpass/#pyautogit","text":"pyautogit.askpass module This is an internal module meant to be used with pyautogit for git askpass git credential asking. The two files are included to differentiate windows and linux, where on linux we use the python3 shebang, on windows the python shebang (Hopefully with the death of python 2 we can only use one file)","title":"pyautogit"},{"location":"DocstringGenerated/Commands/","text":"commands File containing all definitions and functions for git commands used by pyautogit. This file should remain separate from the CUI interface. Author: Jakub Wlodek Created: 01-Oct-2019 remove_repo_tree def remove_repo_tree(target) Function that removes repository. Required since removing git repos on windows require a chmod operation. Parameters Parameter Type Doc target str Dir path to removed repo del_rw def del_rw(action, name, exc) handle_credential_command def handle_credential_command(command, credentials, target_location='.') Function that executes a git command that requires credentials. Parameters Parameter Type Doc command str String command to run credentials list of str The user's entered git remote credentials target_location str Location of repository Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. parse_string_into_executable_command def parse_string_into_executable_command(command, remove_quotes) Function that takes in a string command, and parses it into a subprocess arg list Parameters Parameter Type Doc command str The command as a string Returns Return Variable Type Doc run_command list of str The command as a list of subprocess args handle_basic_command def handle_basic_command(command, name, remove_quotes=True) Function that executes any git command given, and returns program output. Parameters Parameter Type Doc command str The command string to run name str The name of the command being run remove_quotes bool Since subprocess takes an array of strings, we split on spaces, however in some cases we want quotes to remain together (ex. commit message) Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. handle_open_external_program_command def handle_open_external_program_command(command, name) Function used to run commands that open an external program and detatch from pyautogit. Parameters Parameter Type Doc command str Command string to run name str Name of command to run Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. handle_custom_command def handle_custom_command(command) Function that executes a custom, non-git command Patameters command : str Command string to run Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. open_default_editor def open_default_editor(default_editor, path) Function used to open the selected default editor in external window. Parameters Parameter Type Doc default_editor str Editor open command. ex: emacs, code path str The path to the file or directory to open Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_status_short def git_status_short(repo_path='.') Function for getting shorthand git status Parameters Parameter Type Doc repo_path str Target repo path Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_status def git_status(repo_path='.') Function for getting git status Parameters Parameter Type Doc repo_path str Target repo path Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_tree def git_tree(branch) Function that gets git log as a tree Parameters Parameter Type Doc branch str branch or tag name to log Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_log def git_log(branch) Function that gets git log information Parameters Parameter Type Doc branch str branch or tag name to log Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_diff def git_diff() Function that gets git diff Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_diff_file def git_diff_file(filename) Function that gets git diff for specific file Parameters Parameter Type Doc filename str Name of file to diff Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_remotes def git_get_remotes() Function for returning git remotes list Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_remote_info def git_get_remote_info(remote) Function that gets information about a remote Parameters Parameter Type Doc remote str Name of target remote Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_add_remote def git_add_remote(remote_name, remote_url) Function that adds a new remote to the repository Parameters Parameter Type Doc remote_name str Name of the new remote remote_url str URL of the new remote Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_remove_remote def git_remove_remote(remote_name) Function that removes a remote from the repository Parameters Parameter Type Doc remote_name str Name of the remote Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_rename_remote def git_rename_remote(remote, new_name) Function that renames a remote in the repository Parameters Parameter Type Doc remote str Old name of the remote new_name str New name of the new remote Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_commit_info def git_get_commit_info(commit_hash) Function that gets info about a particular commit. Parameters Parameter Type Doc commit_hash str Hash code for target commit Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_checkout_commit def git_checkout_commit(commit_hash) Function that checks out a particular commit. Parameters Parameter Type Doc commit_hash str Hash code for target commit Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_commit_changes def git_commit_changes(commit_message) Function that commits added changes Parameters Parameter Type Doc commit_message str Message attached to target commit Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_create_tag def git_create_tag(tag_name) Function that creates a new tag Parameters Parameter Type Doc tag_name str The name of the new tag Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_tags def git_get_tags() Function that gets list of git tags in repo Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_branches def git_get_branches() Function that gets a list of the repo branches. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_get_recent_commits def git_get_recent_commits(branch) Gets recent commits made to the branch Parameters Parameter Type Doc branch str Name of current branch Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_create_new_branch def git_create_new_branch(branch, checkout=True) Creates anew branch for the repo Parameters Parameter Type Doc branch str Name of new branch checkout bool If true, checkout branch after creation. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_delete_branch def git_delete_branch(branch) Deletes existing git branch Parameters Parameter Type Doc branch str Name of branch to delete Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_checkout_branch def git_checkout_branch(branch) Checks out given branch Parameters Parameter Type Doc branch str Name of target branch Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_checkout_tag def git_checkout_tag(tag) Checks out given tag Parameters Parameter Type Doc tag str Name of tag to check out Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_merge_branches def git_merge_branches(merge_branch) Merges checked out branch with given branch Parameters Parameter Type Doc merge_branch str Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_revert_branch_merge def git_revert_branch_merge() Undos merge between two branches Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_init_new_repo def git_init_new_repo(new_dir_target) Function that creates a new git repository Parameters Parameter Type Doc new_dir_target str Name of new repo Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_clone_new_repo def git_clone_new_repo(new_repo_url, credentials) Function that clones a new git repository Parameters Parameter Type Doc new_repo_url str URL of new repo credentials list of str Username and Password for git remote Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_add_all def git_add_all() Function that stages all files in repo for commit. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_reset_all def git_reset_all() Function that unstages all files in repo for commit. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_add_file def git_add_file(filename) Function that stages single file in repo for commit. Parameters Parameter Type Doc filename str Name of file to stage Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_reset_file def git_reset_file(filename) Function that unstages single file in repo for commit. Parameters Parameter Type Doc filename str Name of file to unstage Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_stash_all def git_stash_all() Function that stashes all changes in repo. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_unstash_all def git_unstash_all() Function that unstashes all changes in repo. Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_stash_file def git_stash_file(filename) Function that stashes single file in repo. Parameters Parameter Type Doc filename str Name of file to stash Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_pull_branch def git_pull_branch(branch, remote, credentials) Function that pulls a branch from the remote repo Parameters Parameter Type Doc branch str Name of current branch remote str Name of remote credentials list of str Username and Password of user for remoe Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise. git_push_to_branch def git_push_to_branch(branch, remote, credentials, repo_path='.') Function that pushes a branch to the remote repo Parameters Parameter Type Doc branch str Name of current branch remote str Name of remote credentials list of str Username and Password of user for remote repo_path str The repository path Returns Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Commands"},{"location":"DocstringGenerated/Commands/#commands","text":"File containing all definitions and functions for git commands used by pyautogit. This file should remain separate from the CUI interface. Author: Jakub Wlodek Created: 01-Oct-2019","title":"commands"},{"location":"DocstringGenerated/Commands/#remove_repo_tree","text":"def remove_repo_tree(target) Function that removes repository. Required since removing git repos on windows require a chmod operation.","title":"remove_repo_tree"},{"location":"DocstringGenerated/Commands/#parameters","text":"Parameter Type Doc target str Dir path to removed repo","title":"Parameters"},{"location":"DocstringGenerated/Commands/#del_rw","text":"def del_rw(action, name, exc)","title":"del_rw"},{"location":"DocstringGenerated/Commands/#handle_credential_command","text":"def handle_credential_command(command, credentials, target_location='.') Function that executes a git command that requires credentials.","title":"handle_credential_command"},{"location":"DocstringGenerated/Commands/#parameters_1","text":"Parameter Type Doc command str String command to run credentials list of str The user's entered git remote credentials target_location str Location of repository","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#parse_string_into_executable_command","text":"def parse_string_into_executable_command(command, remove_quotes) Function that takes in a string command, and parses it into a subprocess arg list","title":"parse_string_into_executable_command"},{"location":"DocstringGenerated/Commands/#parameters_2","text":"Parameter Type Doc command str The command as a string","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_1","text":"Return Variable Type Doc run_command list of str The command as a list of subprocess args","title":"Returns"},{"location":"DocstringGenerated/Commands/#handle_basic_command","text":"def handle_basic_command(command, name, remove_quotes=True) Function that executes any git command given, and returns program output.","title":"handle_basic_command"},{"location":"DocstringGenerated/Commands/#parameters_3","text":"Parameter Type Doc command str The command string to run name str The name of the command being run remove_quotes bool Since subprocess takes an array of strings, we split on spaces, however in some cases we want quotes to remain together (ex. commit message)","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_2","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#handle_open_external_program_command","text":"def handle_open_external_program_command(command, name) Function used to run commands that open an external program and detatch from pyautogit.","title":"handle_open_external_program_command"},{"location":"DocstringGenerated/Commands/#parameters_4","text":"Parameter Type Doc command str Command string to run name str Name of command to run","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_3","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#handle_custom_command","text":"def handle_custom_command(command) Function that executes a custom, non-git command","title":"handle_custom_command"},{"location":"DocstringGenerated/Commands/#patameters","text":"command : str Command string to run","title":"Patameters"},{"location":"DocstringGenerated/Commands/#returns_4","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#open_default_editor","text":"def open_default_editor(default_editor, path) Function used to open the selected default editor in external window.","title":"open_default_editor"},{"location":"DocstringGenerated/Commands/#parameters_5","text":"Parameter Type Doc default_editor str Editor open command. ex: emacs, code path str The path to the file or directory to open","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_5","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_status_short","text":"def git_status_short(repo_path='.') Function for getting shorthand git status","title":"git_status_short"},{"location":"DocstringGenerated/Commands/#parameters_6","text":"Parameter Type Doc repo_path str Target repo path","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_6","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_status","text":"def git_status(repo_path='.') Function for getting git status","title":"git_status"},{"location":"DocstringGenerated/Commands/#parameters_7","text":"Parameter Type Doc repo_path str Target repo path","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_7","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_tree","text":"def git_tree(branch) Function that gets git log as a tree","title":"git_tree"},{"location":"DocstringGenerated/Commands/#parameters_8","text":"Parameter Type Doc branch str branch or tag name to log","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_8","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_log","text":"def git_log(branch) Function that gets git log information","title":"git_log"},{"location":"DocstringGenerated/Commands/#parameters_9","text":"Parameter Type Doc branch str branch or tag name to log","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_9","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_diff","text":"def git_diff() Function that gets git diff","title":"git_diff"},{"location":"DocstringGenerated/Commands/#returns_10","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_diff_file","text":"def git_diff_file(filename) Function that gets git diff for specific file","title":"git_diff_file"},{"location":"DocstringGenerated/Commands/#parameters_10","text":"Parameter Type Doc filename str Name of file to diff","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_11","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_remotes","text":"def git_get_remotes() Function for returning git remotes list","title":"git_get_remotes"},{"location":"DocstringGenerated/Commands/#returns_12","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_remote_info","text":"def git_get_remote_info(remote) Function that gets information about a remote","title":"git_get_remote_info"},{"location":"DocstringGenerated/Commands/#parameters_11","text":"Parameter Type Doc remote str Name of target remote","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_13","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_add_remote","text":"def git_add_remote(remote_name, remote_url) Function that adds a new remote to the repository","title":"git_add_remote"},{"location":"DocstringGenerated/Commands/#parameters_12","text":"Parameter Type Doc remote_name str Name of the new remote remote_url str URL of the new remote","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_14","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_remove_remote","text":"def git_remove_remote(remote_name) Function that removes a remote from the repository","title":"git_remove_remote"},{"location":"DocstringGenerated/Commands/#parameters_13","text":"Parameter Type Doc remote_name str Name of the remote","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_15","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_rename_remote","text":"def git_rename_remote(remote, new_name) Function that renames a remote in the repository","title":"git_rename_remote"},{"location":"DocstringGenerated/Commands/#parameters_14","text":"Parameter Type Doc remote str Old name of the remote new_name str New name of the new remote","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_16","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_commit_info","text":"def git_get_commit_info(commit_hash) Function that gets info about a particular commit.","title":"git_get_commit_info"},{"location":"DocstringGenerated/Commands/#parameters_15","text":"Parameter Type Doc commit_hash str Hash code for target commit","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_17","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_checkout_commit","text":"def git_checkout_commit(commit_hash) Function that checks out a particular commit.","title":"git_checkout_commit"},{"location":"DocstringGenerated/Commands/#parameters_16","text":"Parameter Type Doc commit_hash str Hash code for target commit","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_18","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_commit_changes","text":"def git_commit_changes(commit_message) Function that commits added changes","title":"git_commit_changes"},{"location":"DocstringGenerated/Commands/#parameters_17","text":"Parameter Type Doc commit_message str Message attached to target commit","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_19","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_create_tag","text":"def git_create_tag(tag_name) Function that creates a new tag","title":"git_create_tag"},{"location":"DocstringGenerated/Commands/#parameters_18","text":"Parameter Type Doc tag_name str The name of the new tag","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_20","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_tags","text":"def git_get_tags() Function that gets list of git tags in repo","title":"git_get_tags"},{"location":"DocstringGenerated/Commands/#returns_21","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_branches","text":"def git_get_branches() Function that gets a list of the repo branches.","title":"git_get_branches"},{"location":"DocstringGenerated/Commands/#returns_22","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_get_recent_commits","text":"def git_get_recent_commits(branch) Gets recent commits made to the branch","title":"git_get_recent_commits"},{"location":"DocstringGenerated/Commands/#parameters_19","text":"Parameter Type Doc branch str Name of current branch","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_23","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_create_new_branch","text":"def git_create_new_branch(branch, checkout=True) Creates anew branch for the repo","title":"git_create_new_branch"},{"location":"DocstringGenerated/Commands/#parameters_20","text":"Parameter Type Doc branch str Name of new branch checkout bool If true, checkout branch after creation.","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_24","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_delete_branch","text":"def git_delete_branch(branch) Deletes existing git branch","title":"git_delete_branch"},{"location":"DocstringGenerated/Commands/#parameters_21","text":"Parameter Type Doc branch str Name of branch to delete","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_25","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_checkout_branch","text":"def git_checkout_branch(branch) Checks out given branch","title":"git_checkout_branch"},{"location":"DocstringGenerated/Commands/#parameters_22","text":"Parameter Type Doc branch str Name of target branch","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_26","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_checkout_tag","text":"def git_checkout_tag(tag) Checks out given tag","title":"git_checkout_tag"},{"location":"DocstringGenerated/Commands/#parameters_23","text":"Parameter Type Doc tag str Name of tag to check out","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_27","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_merge_branches","text":"def git_merge_branches(merge_branch) Merges checked out branch with given branch","title":"git_merge_branches"},{"location":"DocstringGenerated/Commands/#parameters_24","text":"Parameter Type Doc merge_branch str","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_28","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_revert_branch_merge","text":"def git_revert_branch_merge() Undos merge between two branches","title":"git_revert_branch_merge"},{"location":"DocstringGenerated/Commands/#returns_29","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_init_new_repo","text":"def git_init_new_repo(new_dir_target) Function that creates a new git repository","title":"git_init_new_repo"},{"location":"DocstringGenerated/Commands/#parameters_25","text":"Parameter Type Doc new_dir_target str Name of new repo","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_30","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_clone_new_repo","text":"def git_clone_new_repo(new_repo_url, credentials) Function that clones a new git repository","title":"git_clone_new_repo"},{"location":"DocstringGenerated/Commands/#parameters_26","text":"Parameter Type Doc new_repo_url str URL of new repo credentials list of str Username and Password for git remote","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_31","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_add_all","text":"def git_add_all() Function that stages all files in repo for commit.","title":"git_add_all"},{"location":"DocstringGenerated/Commands/#returns_32","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_reset_all","text":"def git_reset_all() Function that unstages all files in repo for commit.","title":"git_reset_all"},{"location":"DocstringGenerated/Commands/#returns_33","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_add_file","text":"def git_add_file(filename) Function that stages single file in repo for commit.","title":"git_add_file"},{"location":"DocstringGenerated/Commands/#parameters_27","text":"Parameter Type Doc filename str Name of file to stage","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_34","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_reset_file","text":"def git_reset_file(filename) Function that unstages single file in repo for commit.","title":"git_reset_file"},{"location":"DocstringGenerated/Commands/#parameters_28","text":"Parameter Type Doc filename str Name of file to unstage","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_35","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_stash_all","text":"def git_stash_all() Function that stashes all changes in repo.","title":"git_stash_all"},{"location":"DocstringGenerated/Commands/#returns_36","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_unstash_all","text":"def git_unstash_all() Function that unstashes all changes in repo.","title":"git_unstash_all"},{"location":"DocstringGenerated/Commands/#returns_37","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_stash_file","text":"def git_stash_file(filename) Function that stashes single file in repo.","title":"git_stash_file"},{"location":"DocstringGenerated/Commands/#parameters_29","text":"Parameter Type Doc filename str Name of file to stash","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_38","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_pull_branch","text":"def git_pull_branch(branch, remote, credentials) Function that pulls a branch from the remote repo","title":"git_pull_branch"},{"location":"DocstringGenerated/Commands/#parameters_30","text":"Parameter Type Doc branch str Name of current branch remote str Name of remote credentials list of str Username and Password of user for remoe","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_39","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/Commands/#git_push_to_branch","text":"def git_push_to_branch(branch, remote, credentials, repo_path='.') Function that pushes a branch to the remote repo","title":"git_push_to_branch"},{"location":"DocstringGenerated/Commands/#parameters_31","text":"Parameter Type Doc branch str Name of current branch remote str Name of remote credentials list of str Username and Password of user for remote repo_path str The repository path","title":"Parameters"},{"location":"DocstringGenerated/Commands/#returns_40","text":"Return Variable Type Doc out str Output string from stdout if success, stderr if failure err int Error code if failure, 0 otherwise.","title":"Returns"},{"location":"DocstringGenerated/InternalEditorScreen/","text":"internal_editor_screen Pyautogit internal editor, based on snano example from py_cui Classes Class Doc EditorScreenManager Extension of screenManager, manages editor subscreen EditorScreenManager(pyautogit.screen_manager.ScreenManager) class EditorScreenManager(pyautogit.screen_manager.ScreenManager) Class representing internal editor screen for pyautogit Attributes Attribute Type Doc opened_path str The current opened path for the editor Methods Method Doc initialize_screen_elements Override of base class. Initializes editor widgets and widget set set_initial_values Function that sets status bar text clear_elements Function for clearing widgets in editor screen open_new_directory_external Opens a new directory given an external target open_new_directory Function that opens a new directory add_new_file Function for creating a new file open_file_dir Function that opens a file/directory from menu save_opened_file Function that saves the opened file delete_selected_file_dir Function that deletes the selected file init def __init__(self, top_manager, opened_path) Contructor for the EditorScreenManager initialize_screen_elements def initialize_screen_elements(self) Override of base class. Initializes editor widgets and widget set Returns Return Variable Type Doc pyautogit_editor_widget_set py_cui.widget_set.WidgetSet Widget set for internal editor screen refresh_status def refresh_status(self) Function that refreshes the view of the file menu on new dir or file creation set_initial_values def set_initial_values(self) Function that sets status bar text clear_elements def clear_elements(self) Function for clearing widgets in editor screen open_new_directory_external def open_new_directory_external(self, new_dir_path) Opens a new directory given an external target Parameters Parameter Type Doc new_dir_path str Path of directory to open open_new_directory def open_new_directory(self) Function that opens a new directory add_new_file def add_new_file(self) Function for creating a new file add_new_directory def add_new_directory(self) Function for creating a new directory open_file_dir def open_file_dir(self) Function that opens a file/directory from menu save_opened_file def save_opened_file(self) Function that saves the opened file delete_selected_file_dir def delete_selected_file_dir(self) Function that deletes the selected file","title":"Editor Screen"},{"location":"DocstringGenerated/InternalEditorScreen/#internal_editor_screen","text":"Pyautogit internal editor, based on snano example from py_cui","title":"internal_editor_screen"},{"location":"DocstringGenerated/InternalEditorScreen/#classes","text":"Class Doc EditorScreenManager Extension of screenManager, manages editor subscreen","title":"Classes"},{"location":"DocstringGenerated/InternalEditorScreen/#editorscreenmanagerpyautogitscreen_managerscreenmanager","text":"class EditorScreenManager(pyautogit.screen_manager.ScreenManager) Class representing internal editor screen for pyautogit","title":"EditorScreenManager(pyautogit.screen_manager.ScreenManager)"},{"location":"DocstringGenerated/InternalEditorScreen/#attributes","text":"Attribute Type Doc opened_path str The current opened path for the editor","title":"Attributes"},{"location":"DocstringGenerated/InternalEditorScreen/#methods","text":"Method Doc initialize_screen_elements Override of base class. Initializes editor widgets and widget set set_initial_values Function that sets status bar text clear_elements Function for clearing widgets in editor screen open_new_directory_external Opens a new directory given an external target open_new_directory Function that opens a new directory add_new_file Function for creating a new file open_file_dir Function that opens a file/directory from menu save_opened_file Function that saves the opened file delete_selected_file_dir Function that deletes the selected file","title":"Methods"},{"location":"DocstringGenerated/InternalEditorScreen/#init","text":"def __init__(self, top_manager, opened_path) Contructor for the EditorScreenManager","title":"init"},{"location":"DocstringGenerated/InternalEditorScreen/#initialize_screen_elements","text":"def initialize_screen_elements(self) Override of base class. Initializes editor widgets and widget set","title":"initialize_screen_elements"},{"location":"DocstringGenerated/InternalEditorScreen/#returns","text":"Return Variable Type Doc pyautogit_editor_widget_set py_cui.widget_set.WidgetSet Widget set for internal editor screen","title":"Returns"},{"location":"DocstringGenerated/InternalEditorScreen/#refresh_status","text":"def refresh_status(self) Function that refreshes the view of the file menu on new dir or file creation","title":"refresh_status"},{"location":"DocstringGenerated/InternalEditorScreen/#set_initial_values","text":"def set_initial_values(self) Function that sets status bar text","title":"set_initial_values"},{"location":"DocstringGenerated/InternalEditorScreen/#clear_elements","text":"def clear_elements(self) Function for clearing widgets in editor screen","title":"clear_elements"},{"location":"DocstringGenerated/InternalEditorScreen/#open_new_directory_external","text":"def open_new_directory_external(self, new_dir_path) Opens a new directory given an external target","title":"open_new_directory_external"},{"location":"DocstringGenerated/InternalEditorScreen/#parameters","text":"Parameter Type Doc new_dir_path str Path of directory to open","title":"Parameters"},{"location":"DocstringGenerated/InternalEditorScreen/#open_new_directory","text":"def open_new_directory(self) Function that opens a new directory","title":"open_new_directory"},{"location":"DocstringGenerated/InternalEditorScreen/#add_new_file","text":"def add_new_file(self) Function for creating a new file","title":"add_new_file"},{"location":"DocstringGenerated/InternalEditorScreen/#add_new_directory","text":"def add_new_directory(self) Function for creating a new directory","title":"add_new_directory"},{"location":"DocstringGenerated/InternalEditorScreen/#open_file_dir","text":"def open_file_dir(self) Function that opens a file/directory from menu","title":"open_file_dir"},{"location":"DocstringGenerated/InternalEditorScreen/#save_opened_file","text":"def save_opened_file(self) Function that saves the opened file","title":"save_opened_file"},{"location":"DocstringGenerated/InternalEditorScreen/#delete_selected_file_dir","text":"def delete_selected_file_dir(self) Function that deletes the selected file","title":"delete_selected_file_dir"},{"location":"DocstringGenerated/Logger/","text":"logger Module containing logging classes and functions. The logger is controlled via a set of global variables set by the pyautogit client. toggle_logging def toggle_logging() Function for opening/closing log file as required. set_log_file_path def set_log_file_path(log_file_path) Sets the path to the log file Parameters Parameter Type Doc log_file_path str Path to the log file initialize_logger def initialize_logger() Function for initializing log-file writing in addition to stdout output Returns Return Variable Type Doc initialized bool True if log file opened, false otherwise close_logger def close_logger() Function that closes the opened logfile write def write(text, no_timestamp=False) Main logging funcion. Called if write function was set Parameters Parameter Type Doc text str debug text to print no_timestamp=False bool a flag to disable timestamp printing when required","title":"Logger"},{"location":"DocstringGenerated/Logger/#logger","text":"Module containing logging classes and functions. The logger is controlled via a set of global variables set by the pyautogit client.","title":"logger"},{"location":"DocstringGenerated/Logger/#toggle_logging","text":"def toggle_logging() Function for opening/closing log file as required.","title":"toggle_logging"},{"location":"DocstringGenerated/Logger/#set_log_file_path","text":"def set_log_file_path(log_file_path) Sets the path to the log file","title":"set_log_file_path"},{"location":"DocstringGenerated/Logger/#parameters","text":"Parameter Type Doc log_file_path str Path to the log file","title":"Parameters"},{"location":"DocstringGenerated/Logger/#initialize_logger","text":"def initialize_logger() Function for initializing log-file writing in addition to stdout output","title":"initialize_logger"},{"location":"DocstringGenerated/Logger/#returns","text":"Return Variable Type Doc initialized bool True if log file opened, false otherwise","title":"Returns"},{"location":"DocstringGenerated/Logger/#close_logger","text":"def close_logger() Function that closes the opened logfile","title":"close_logger"},{"location":"DocstringGenerated/Logger/#write","text":"def write(text, no_timestamp=False) Main logging funcion. Called if write function was set","title":"write"},{"location":"DocstringGenerated/Logger/#parameters_1","text":"Parameter Type Doc text str debug text to print no_timestamp=False bool a flag to disable timestamp printing when required","title":"Parameters"},{"location":"DocstringGenerated/MetadataManager/","text":"metadata_manager Metadata Management Classes and Functions Classes Class Doc PyAutogitMetadataManager Class responsible for reading, writing, and applying metadata PyAutogitMetadataManager class PyAutogitMetadataManager Helper class for managing inter-use metadata for pyautogit Attributes Attribute Type Doc manager PyAutogitManager The top level program manager object first_time bool Flag that tells metadata manager if metadata exists Methods Method Doc write_metadata Writes metadata file with cached settings apply_metadata Applies metadata from cached settings read_metadata Converts metadata json file to python dict init def __init__(self, manager) Constructor for PyAutogitMetadataManager write_metadata def write_metadata(self) Writes metadata file with cached settings apply_metadata def apply_metadata(self, metadata) Applies metadata from cached settings Parameters Parameter Type Doc metadata dict Metadata parsed from json to python dict. read_metadata def read_metadata(self) Converts metadata json file to python dict Returns Return Variable Type Doc metadata dict metadata dictionary","title":"Metadata Manager"},{"location":"DocstringGenerated/MetadataManager/#metadata_manager","text":"Metadata Management Classes and Functions","title":"metadata_manager"},{"location":"DocstringGenerated/MetadataManager/#classes","text":"Class Doc PyAutogitMetadataManager Class responsible for reading, writing, and applying metadata","title":"Classes"},{"location":"DocstringGenerated/MetadataManager/#pyautogitmetadatamanager","text":"class PyAutogitMetadataManager Helper class for managing inter-use metadata for pyautogit","title":"PyAutogitMetadataManager"},{"location":"DocstringGenerated/MetadataManager/#attributes","text":"Attribute Type Doc manager PyAutogitManager The top level program manager object first_time bool Flag that tells metadata manager if metadata exists","title":"Attributes"},{"location":"DocstringGenerated/MetadataManager/#methods","text":"Method Doc write_metadata Writes metadata file with cached settings apply_metadata Applies metadata from cached settings read_metadata Converts metadata json file to python dict","title":"Methods"},{"location":"DocstringGenerated/MetadataManager/#init","text":"def __init__(self, manager) Constructor for PyAutogitMetadataManager","title":"init"},{"location":"DocstringGenerated/MetadataManager/#write_metadata","text":"def write_metadata(self) Writes metadata file with cached settings","title":"write_metadata"},{"location":"DocstringGenerated/MetadataManager/#apply_metadata","text":"def apply_metadata(self, metadata) Applies metadata from cached settings","title":"apply_metadata"},{"location":"DocstringGenerated/MetadataManager/#parameters","text":"Parameter Type Doc metadata dict Metadata parsed from json to python dict.","title":"Parameters"},{"location":"DocstringGenerated/MetadataManager/#read_metadata","text":"def read_metadata(self) Converts metadata json file to python dict","title":"read_metadata"},{"location":"DocstringGenerated/MetadataManager/#returns","text":"Return Variable Type Doc metadata dict metadata dictionary","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/","text":"pyautogit Main pyautogit manager class and entry point The main driver class contains code for common actions performed by all subscreens such as credential management, as well as functions for switching between subscreens. Author: Jakub Wlodek Created: 01-Oct-2019 Classes Class Doc PyAutogitManager Main py_cui wrapper class that drives pyautogit. Uses ScreenManager subclass instances for subscreens Functions Function Doc find_repos_in_path Searches for .git directories in specified path is_git_repo Checks if given path is a git repository parse_args Parses user arguments main Program entrypoint find_repos_in_path def find_repos_in_path(path) Helper function that finds repositories in the path Parameters Parameter Type Doc path str Target path Returns Return Variable Type Doc repos list of str list of git repositories within target is_git_repo def is_git_repo(path) Simple function that checks if a given path is a git repository Parameters Parameter Type Doc path str path to check Returns Return Variable Type Doc is_repo bool True if .git exists, False otherwise parse_args def parse_args() Function that parses user arguments for pyautogit Returns Return Variable Type Doc target_repo str The target path for pyautogit save_metadata bool flag to say if metadata should be saved credentials list of str username, password, if entered main def main() Entry point for pyautogit. Parses arguments, and initializes the CUI PyAutogitManager class PyAutogitManager Main pyautogit manager class. Controls all operations of CUI Attributes Attribute Type Doc root PyCUI The root py_cui window target_path str The path to the workspace directory save_metadata bool Flag to specify metadata saving or not credentials list of str Username and Password for git remote current_state str Current state of pyautogit (repo control or repo select) default_editor str Command to open external editor post_input_callback no-arg or lambda function Function fired after a user input event operation_thread Thread A thread for performing async operations. Starts as None, Thread created as needed repos list of str List of repositories found in workspace repo_select_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo select screen repo_menu py_cui.widgets.ScrollMenu The repository select menu in the repo select screen git_status_box py_cui.widgets.ScrolledTextBlock Main info panel for repo select screen current_status_box py_cui.widgets.ScrolledTextBlock Secondary info panel for repo select screen clone_new_box py_cui.widgets.TextBox Textbox for cloning new repositories create_new_box py_cui.widgets.TextBox Textbox for creating new repositories repo_select_manager RepoSelectManager The manager wrapper class for the repo select screen repo_control_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo control screen add_files_menu py_cui.widgets.ScrollMenu Menu for adding/unstaging files remotes_menu py_cui.widgets.ScrollMenu Menu for selecting remotes branch_menu py_cui.widgets.ScrollMenu Menu for selecting branches commits_menu py_cui.widgets.ScrollMenu Menu listing most recent commits info_text_block py_cui.widgets.ScrolledTextBlock Main Info text block in repo control screen new_branch_textbox py_cui.widgets.TextBox Textbox for creating new branches commit_message_box py_cui.widgets.TextBox Textbox for entering new commit messages repo_control_manager RepoControlManager Manager wrapper for repo control screen Methods Method Doc open_not_supported_popup Function that displays warning for a non-supported operation open_autogit_window Function that opens the repository control window. open_repo_select_window Function that opens the repository select window. update_password Function called once password is entered. ask_password Function that opens popup and asks for password. Also writes username to credentials ask_credentials Function that asks for user credentials and places them in the appropriate variables. were_credentials_entered Simple function for checking if credentials were entered perform_long_operation Function that wraps an operation around a loading icon popup. update_default_editor Function that sets the default editor ask_default_editor Function that asks user to enter a default text editor update_message Function that is run after user inputs message ask_message Function that asks the user for input. get_logo_text Generates ascii-art version of pyautogit logo get_about_info Generates some about me information get_welcome_message Function that gets a basic welcome message shown at first run init def __init__(self, root, target_path, current_state, save_metadata, credentials) Constructor for PyAutogitManager close_cleanup def close_cleanup(self) Function fired upon closing pyautogit clean_exit def clean_exit(self) Function that exits the CUI cleanly error_exit def error_exit(self) Function that exits the CUI with an error code open_not_supported_popup def open_not_supported_popup(self, operation) Function that displays warning for a non-supported operation Parameters Parameter Type Doc operation str The name of the non-supported operation open_autogit_window def open_autogit_window(self) Function that opens the repository control window. open_autogit_window_target def open_autogit_window_target(self) Function that opens a repo control window given a target location open_repo_select_window def open_repo_select_window(self) Opens the repo select window. Fired when the backspace key is pressed in the repo control window open_settings_window def open_settings_window(self) Function for opening the settings window open_editor_window def open_editor_window(self) Function that opens an editor window update_password def update_password(self, passwd) Function called once password is entered. If necessary, fires the post_input_callback function Parameters Parameter Type Doc passwd str The user's password ask_password def ask_password(self, user) Function that opens popup and asks for password. Also writes username to credentials. Parameters Parameter Type Doc user str The user's username ask_credentials def ask_credentials(self, callback=None) Function that asks for user credentials and places them in the appropriate variables. Parameters Parameter Type Doc callback function Default None, otherwise function called after credentials are entered. were_credentials_entered def were_credentials_entered(self) Simple function for checking if credentials were entered Returns Return Variable Type Doc were_credentials_entered bool True if credentials found, otherwise false perform_long_operation def perform_long_operation(self, title, long_operation_function, post_loading_callback) Function that wraps an operation around a loading icon popup. Parameters Parameter Type Doc title str title for loading icon long_operation_function function operation to perform in the background post_loading_callback function Function fired once long operation is finished. update_default_editor def update_default_editor(self) Function that sets the default editor Parameters Parameter Type Doc editor str command line call to open the editor ask_default_editor def ask_default_editor(self) Function that asks user to enter a default text editor update_message def update_message(self, message) Function that is run after user inputs message Parameters Parameter Type Doc message str User returned input ask_message def ask_message(self, prompt, callback=None) Function that asks the user for input. Parameters Parameter Type Doc prompt str Prompt for user input callback function Default None, otherwise, function fired after credentials are asked get_logo_text def get_logo_text(self) Generates ascii-art version of pyautogit logo Returns Return Variable Type Doc logo str ascii-art logo get_about_info def get_about_info(self, with_logo=True) Generates some about me information Parameters Parameter Type Doc with_logo bool flag to show logo or not. Returns Return Variable Type Doc about_info str string with about information get_welcome_message def get_welcome_message(self) Function that gets a basic welcome message shown at first run Returns Return Variable Type Doc welcome str welcome message string","title":"PyAutogitManager"},{"location":"DocstringGenerated/Pyautogit/#pyautogit","text":"Main pyautogit manager class and entry point The main driver class contains code for common actions performed by all subscreens such as credential management, as well as functions for switching between subscreens. Author: Jakub Wlodek Created: 01-Oct-2019","title":"pyautogit"},{"location":"DocstringGenerated/Pyautogit/#classes","text":"Class Doc PyAutogitManager Main py_cui wrapper class that drives pyautogit. Uses ScreenManager subclass instances for subscreens","title":"Classes"},{"location":"DocstringGenerated/Pyautogit/#functions","text":"Function Doc find_repos_in_path Searches for .git directories in specified path is_git_repo Checks if given path is a git repository parse_args Parses user arguments main Program entrypoint","title":"Functions"},{"location":"DocstringGenerated/Pyautogit/#find_repos_in_path","text":"def find_repos_in_path(path) Helper function that finds repositories in the path","title":"find_repos_in_path"},{"location":"DocstringGenerated/Pyautogit/#parameters","text":"Parameter Type Doc path str Target path","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#returns","text":"Return Variable Type Doc repos list of str list of git repositories within target","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#is_git_repo","text":"def is_git_repo(path) Simple function that checks if a given path is a git repository","title":"is_git_repo"},{"location":"DocstringGenerated/Pyautogit/#parameters_1","text":"Parameter Type Doc path str path to check","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#returns_1","text":"Return Variable Type Doc is_repo bool True if .git exists, False otherwise","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#parse_args","text":"def parse_args() Function that parses user arguments for pyautogit","title":"parse_args"},{"location":"DocstringGenerated/Pyautogit/#returns_2","text":"Return Variable Type Doc target_repo str The target path for pyautogit save_metadata bool flag to say if metadata should be saved credentials list of str username, password, if entered","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#main","text":"def main() Entry point for pyautogit. Parses arguments, and initializes the CUI","title":"main"},{"location":"DocstringGenerated/Pyautogit/#pyautogitmanager","text":"class PyAutogitManager Main pyautogit manager class. Controls all operations of CUI","title":"PyAutogitManager"},{"location":"DocstringGenerated/Pyautogit/#attributes","text":"Attribute Type Doc root PyCUI The root py_cui window target_path str The path to the workspace directory save_metadata bool Flag to specify metadata saving or not credentials list of str Username and Password for git remote current_state str Current state of pyautogit (repo control or repo select) default_editor str Command to open external editor post_input_callback no-arg or lambda function Function fired after a user input event operation_thread Thread A thread for performing async operations. Starts as None, Thread created as needed repos list of str List of repositories found in workspace repo_select_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo select screen repo_menu py_cui.widgets.ScrollMenu The repository select menu in the repo select screen git_status_box py_cui.widgets.ScrolledTextBlock Main info panel for repo select screen current_status_box py_cui.widgets.ScrolledTextBlock Secondary info panel for repo select screen clone_new_box py_cui.widgets.TextBox Textbox for cloning new repositories create_new_box py_cui.widgets.TextBox Textbox for creating new repositories repo_select_manager RepoSelectManager The manager wrapper class for the repo select screen repo_control_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo control screen add_files_menu py_cui.widgets.ScrollMenu Menu for adding/unstaging files remotes_menu py_cui.widgets.ScrollMenu Menu for selecting remotes branch_menu py_cui.widgets.ScrollMenu Menu for selecting branches commits_menu py_cui.widgets.ScrollMenu Menu listing most recent commits info_text_block py_cui.widgets.ScrolledTextBlock Main Info text block in repo control screen new_branch_textbox py_cui.widgets.TextBox Textbox for creating new branches commit_message_box py_cui.widgets.TextBox Textbox for entering new commit messages repo_control_manager RepoControlManager Manager wrapper for repo control screen","title":"Attributes"},{"location":"DocstringGenerated/Pyautogit/#methods","text":"Method Doc open_not_supported_popup Function that displays warning for a non-supported operation open_autogit_window Function that opens the repository control window. open_repo_select_window Function that opens the repository select window. update_password Function called once password is entered. ask_password Function that opens popup and asks for password. Also writes username to credentials ask_credentials Function that asks for user credentials and places them in the appropriate variables. were_credentials_entered Simple function for checking if credentials were entered perform_long_operation Function that wraps an operation around a loading icon popup. update_default_editor Function that sets the default editor ask_default_editor Function that asks user to enter a default text editor update_message Function that is run after user inputs message ask_message Function that asks the user for input. get_logo_text Generates ascii-art version of pyautogit logo get_about_info Generates some about me information get_welcome_message Function that gets a basic welcome message shown at first run","title":"Methods"},{"location":"DocstringGenerated/Pyautogit/#init","text":"def __init__(self, root, target_path, current_state, save_metadata, credentials) Constructor for PyAutogitManager","title":"init"},{"location":"DocstringGenerated/Pyautogit/#close_cleanup","text":"def close_cleanup(self) Function fired upon closing pyautogit","title":"close_cleanup"},{"location":"DocstringGenerated/Pyautogit/#clean_exit","text":"def clean_exit(self) Function that exits the CUI cleanly","title":"clean_exit"},{"location":"DocstringGenerated/Pyautogit/#error_exit","text":"def error_exit(self) Function that exits the CUI with an error code","title":"error_exit"},{"location":"DocstringGenerated/Pyautogit/#open_not_supported_popup","text":"def open_not_supported_popup(self, operation) Function that displays warning for a non-supported operation","title":"open_not_supported_popup"},{"location":"DocstringGenerated/Pyautogit/#parameters_2","text":"Parameter Type Doc operation str The name of the non-supported operation","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#open_autogit_window","text":"def open_autogit_window(self) Function that opens the repository control window.","title":"open_autogit_window"},{"location":"DocstringGenerated/Pyautogit/#open_autogit_window_target","text":"def open_autogit_window_target(self) Function that opens a repo control window given a target location","title":"open_autogit_window_target"},{"location":"DocstringGenerated/Pyautogit/#open_repo_select_window","text":"def open_repo_select_window(self) Opens the repo select window. Fired when the backspace key is pressed in the repo control window","title":"open_repo_select_window"},{"location":"DocstringGenerated/Pyautogit/#open_settings_window","text":"def open_settings_window(self) Function for opening the settings window","title":"open_settings_window"},{"location":"DocstringGenerated/Pyautogit/#open_editor_window","text":"def open_editor_window(self) Function that opens an editor window","title":"open_editor_window"},{"location":"DocstringGenerated/Pyautogit/#update_password","text":"def update_password(self, passwd) Function called once password is entered. If necessary, fires the post_input_callback function","title":"update_password"},{"location":"DocstringGenerated/Pyautogit/#parameters_3","text":"Parameter Type Doc passwd str The user's password","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#ask_password","text":"def ask_password(self, user) Function that opens popup and asks for password. Also writes username to credentials.","title":"ask_password"},{"location":"DocstringGenerated/Pyautogit/#parameters_4","text":"Parameter Type Doc user str The user's username","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#ask_credentials","text":"def ask_credentials(self, callback=None) Function that asks for user credentials and places them in the appropriate variables.","title":"ask_credentials"},{"location":"DocstringGenerated/Pyautogit/#parameters_5","text":"Parameter Type Doc callback function Default None, otherwise function called after credentials are entered.","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#were_credentials_entered","text":"def were_credentials_entered(self) Simple function for checking if credentials were entered","title":"were_credentials_entered"},{"location":"DocstringGenerated/Pyautogit/#returns_3","text":"Return Variable Type Doc were_credentials_entered bool True if credentials found, otherwise false","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#perform_long_operation","text":"def perform_long_operation(self, title, long_operation_function, post_loading_callback) Function that wraps an operation around a loading icon popup.","title":"perform_long_operation"},{"location":"DocstringGenerated/Pyautogit/#parameters_6","text":"Parameter Type Doc title str title for loading icon long_operation_function function operation to perform in the background post_loading_callback function Function fired once long operation is finished.","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#update_default_editor","text":"def update_default_editor(self) Function that sets the default editor","title":"update_default_editor"},{"location":"DocstringGenerated/Pyautogit/#parameters_7","text":"Parameter Type Doc editor str command line call to open the editor","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#ask_default_editor","text":"def ask_default_editor(self) Function that asks user to enter a default text editor","title":"ask_default_editor"},{"location":"DocstringGenerated/Pyautogit/#update_message","text":"def update_message(self, message) Function that is run after user inputs message","title":"update_message"},{"location":"DocstringGenerated/Pyautogit/#parameters_8","text":"Parameter Type Doc message str User returned input","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#ask_message","text":"def ask_message(self, prompt, callback=None) Function that asks the user for input.","title":"ask_message"},{"location":"DocstringGenerated/Pyautogit/#parameters_9","text":"Parameter Type Doc prompt str Prompt for user input callback function Default None, otherwise, function fired after credentials are asked","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#get_logo_text","text":"def get_logo_text(self) Generates ascii-art version of pyautogit logo","title":"get_logo_text"},{"location":"DocstringGenerated/Pyautogit/#returns_4","text":"Return Variable Type Doc logo str ascii-art logo","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#get_about_info","text":"def get_about_info(self, with_logo=True) Generates some about me information","title":"get_about_info"},{"location":"DocstringGenerated/Pyautogit/#parameters_10","text":"Parameter Type Doc with_logo bool flag to show logo or not.","title":"Parameters"},{"location":"DocstringGenerated/Pyautogit/#returns_5","text":"Return Variable Type Doc about_info str string with about information","title":"Returns"},{"location":"DocstringGenerated/Pyautogit/#get_welcome_message","text":"def get_welcome_message(self) Function that gets a basic welcome message shown at first run","title":"get_welcome_message"},{"location":"DocstringGenerated/Pyautogit/#returns_6","text":"Return Variable Type Doc welcome str welcome message string","title":"Returns"},{"location":"DocstringGenerated/RepoControlScreen/","text":"repo_control_screen File containing functions used by the repository specific CUI screen. This file is meant to handle the intermediate considerations between the CUI and the underlying git commands found in pyautogit.commands Author: Jakub Wlodek Created: 01-Oct-2019 Classes Class Doc RepoControlManager Extension of ScreenManager, manages repository control actions RepoControlManager(pyautogit.screen_manager.ScreenManager) class RepoControlManager(pyautogit.screen_manager.ScreenManager) Class responsible for managing functions for the repository control screen. This class contains functions that are used by pyautogit for individual repository control. It provides the interface between the CUI widgets for the repository control screen and the pyautogit.commands module. Attributes Attribute Type Doc menu_choices list of str Overriden list of menu choices accessible from the repository control menu Methods Method Doc process_menu_selection Override of base class, executes based on user menu selection refresh_status Function that refreshes a git repository status get_repo_status_short Gets shorthand repository status get_repo_remotes gets list of repository remotes get_repo_branches gets list of repository branches show_remote_info gets info about remote show_commit_info gets info about a particular commit get_recent_commits gets list of recent commits to branch create_new_tag Creates a new tag show_log Displays the git log stash_all_changes Stashes all repo changes unstash_all_changes Pops the stash open_git_diff Opens current git diff state open_git_diff_file Gets the diff for a selected file open_editor Opens an external editor if selected open_editor_file Opens an external editor for a selected file add_all_changes Adds all changes to staging add_revert_file Adds/Reverts single file from staging ask_new_remote_name Asks user for new remote name ask_new_remote_url Asks user for new remote url add_remote Adds a new remote to repo delete_remote Deletes selected remote from local repo rename_remote Renames selected remote from local repo commit Commits currently staged items pull_repo_branch pulls from remote push_repo_branch pushes to remote create_new_branch Creates new branch for repository checkout_branch Checks out specified branch checkout_commit Checks out specified commit init def __init__(self, top_manager) Constructor for the RepoControlManager class process_menu_selection def process_menu_selection(self, selection) Override of base class, executes based on user menu selection Parameters Parameter Type Doc selection str User selection from menu initialize_screen_elements def initialize_screen_elements(self) Function that initializes the widgets for the repo control screen. Override of base class function Returns Return Variable Type Doc repo_control_widget_set py_cui.widget_set.WidgetSet Widget set object for repo control screen clear_elements def clear_elements(self) Function that clears elements of repo control window set_initial_values def set_initial_values(self) Function that initializes status bar and info text for repo control window refresh_status def refresh_status(self) Function that refreshes a git repository status get_repo_status_short def get_repo_status_short(self) Gets shorthand repository status get_repo_remotes def get_repo_remotes(self) Gets list of repository remotes show_branches def show_branches(self) Function that swaps to showing branches get_repo_branches def get_repo_branches(self) Gets list of repository branches show_tags def show_tags(self) Function that swaps to showing tags get_repo_tags def get_repo_tags(self) Gets list of repository tags show_remote_info def show_remote_info(self) Gets info about remote show_commit_info def show_commit_info(self) Gets info about a particular commit get_recent_commits def get_recent_commits(self) Gets list of recent commits to branch create_new_tag def create_new_tag(self) Creates a new tag show_log def show_log(self) Displays the git log show_tree def show_tree(self) Displays git log as a tree stash_all_changes def stash_all_changes(self) Stashes all repo changes unstash_all_changes def unstash_all_changes(self) Pops the stash open_git_diff def open_git_diff(self) Opens current git diff state open_git_diff_file def open_git_diff_file(self) Gets the diff for a selected file open_editor def open_editor(self, file=None) Opens an external editor if selected open_editor_file def open_editor_file(self) Opens an external editor for a selected file add_all_changes def add_all_changes(self) Adds all changes to staging add_revert_file def add_revert_file(self) Adds/Reverts single file from staging ask_new_remote_name def ask_new_remote_name(self) Opens text box to enter new remote name ask_new_remote_url def ask_new_remote_url(self, remote_name) Opens text box to ask new remote url Parameters Parameter Type Doc remote_name str Remote name entered in previous textbox add_remote def add_remote(self, remote_url) Adds remote to git repo Parameters Parameter Type Doc remote_url str URL entered by user delete_remote def delete_remote(self) Deletes selected remote from local repo rename_remote def rename_remote(self) Renames selected remote from local repo commit def commit(self) Commits currently staged items pull_repo_branch def pull_repo_branch(self) Pulls from remote push_repo_branch def push_repo_branch(self) Pushes to remote create_new_branch def create_new_branch(self) Creates new branch for repository delete_branch def delete_branch(self) Deletes selected branch checkout_branch def checkout_branch(self) Checks out specified branch merge_branches def merge_branches(self) Merges selected branch into the currently checked out branch revert_merge def revert_merge(self) Undos the merge that was just performed checkout_commit def checkout_commit(self) Checks out specified commit show_help_overview def show_help_overview(self) Function that displays help message for overview mode. show_help_add_files_menu def show_help_add_files_menu(self) Function that displays help message for the add files menu. show_help_remotes_menu def show_help_remotes_menu(self) Function that displays help message for the add files menu. show_help_branch_menu def show_help_branch_menu(self) Function that displays help message for the add files menu. show_help_commits_menu def show_help_commits_menu(self) Function that displays help message for the add files menu.","title":"Repo Control"},{"location":"DocstringGenerated/RepoControlScreen/#repo_control_screen","text":"File containing functions used by the repository specific CUI screen. This file is meant to handle the intermediate considerations between the CUI and the underlying git commands found in pyautogit.commands Author: Jakub Wlodek Created: 01-Oct-2019","title":"repo_control_screen"},{"location":"DocstringGenerated/RepoControlScreen/#classes","text":"Class Doc RepoControlManager Extension of ScreenManager, manages repository control actions","title":"Classes"},{"location":"DocstringGenerated/RepoControlScreen/#repocontrolmanagerpyautogitscreen_managerscreenmanager","text":"class RepoControlManager(pyautogit.screen_manager.ScreenManager) Class responsible for managing functions for the repository control screen. This class contains functions that are used by pyautogit for individual repository control. It provides the interface between the CUI widgets for the repository control screen and the pyautogit.commands module.","title":"RepoControlManager(pyautogit.screen_manager.ScreenManager)"},{"location":"DocstringGenerated/RepoControlScreen/#attributes","text":"Attribute Type Doc menu_choices list of str Overriden list of menu choices accessible from the repository control menu","title":"Attributes"},{"location":"DocstringGenerated/RepoControlScreen/#methods","text":"Method Doc process_menu_selection Override of base class, executes based on user menu selection refresh_status Function that refreshes a git repository status get_repo_status_short Gets shorthand repository status get_repo_remotes gets list of repository remotes get_repo_branches gets list of repository branches show_remote_info gets info about remote show_commit_info gets info about a particular commit get_recent_commits gets list of recent commits to branch create_new_tag Creates a new tag show_log Displays the git log stash_all_changes Stashes all repo changes unstash_all_changes Pops the stash open_git_diff Opens current git diff state open_git_diff_file Gets the diff for a selected file open_editor Opens an external editor if selected open_editor_file Opens an external editor for a selected file add_all_changes Adds all changes to staging add_revert_file Adds/Reverts single file from staging ask_new_remote_name Asks user for new remote name ask_new_remote_url Asks user for new remote url add_remote Adds a new remote to repo delete_remote Deletes selected remote from local repo rename_remote Renames selected remote from local repo commit Commits currently staged items pull_repo_branch pulls from remote push_repo_branch pushes to remote create_new_branch Creates new branch for repository checkout_branch Checks out specified branch checkout_commit Checks out specified commit","title":"Methods"},{"location":"DocstringGenerated/RepoControlScreen/#init","text":"def __init__(self, top_manager) Constructor for the RepoControlManager class","title":"init"},{"location":"DocstringGenerated/RepoControlScreen/#process_menu_selection","text":"def process_menu_selection(self, selection) Override of base class, executes based on user menu selection","title":"process_menu_selection"},{"location":"DocstringGenerated/RepoControlScreen/#parameters","text":"Parameter Type Doc selection str User selection from menu","title":"Parameters"},{"location":"DocstringGenerated/RepoControlScreen/#initialize_screen_elements","text":"def initialize_screen_elements(self) Function that initializes the widgets for the repo control screen. Override of base class function","title":"initialize_screen_elements"},{"location":"DocstringGenerated/RepoControlScreen/#returns","text":"Return Variable Type Doc repo_control_widget_set py_cui.widget_set.WidgetSet Widget set object for repo control screen","title":"Returns"},{"location":"DocstringGenerated/RepoControlScreen/#clear_elements","text":"def clear_elements(self) Function that clears elements of repo control window","title":"clear_elements"},{"location":"DocstringGenerated/RepoControlScreen/#set_initial_values","text":"def set_initial_values(self) Function that initializes status bar and info text for repo control window","title":"set_initial_values"},{"location":"DocstringGenerated/RepoControlScreen/#refresh_status","text":"def refresh_status(self) Function that refreshes a git repository status","title":"refresh_status"},{"location":"DocstringGenerated/RepoControlScreen/#get_repo_status_short","text":"def get_repo_status_short(self) Gets shorthand repository status","title":"get_repo_status_short"},{"location":"DocstringGenerated/RepoControlScreen/#get_repo_remotes","text":"def get_repo_remotes(self) Gets list of repository remotes","title":"get_repo_remotes"},{"location":"DocstringGenerated/RepoControlScreen/#show_branches","text":"def show_branches(self) Function that swaps to showing branches","title":"show_branches"},{"location":"DocstringGenerated/RepoControlScreen/#get_repo_branches","text":"def get_repo_branches(self) Gets list of repository branches","title":"get_repo_branches"},{"location":"DocstringGenerated/RepoControlScreen/#show_tags","text":"def show_tags(self) Function that swaps to showing tags","title":"show_tags"},{"location":"DocstringGenerated/RepoControlScreen/#get_repo_tags","text":"def get_repo_tags(self) Gets list of repository tags","title":"get_repo_tags"},{"location":"DocstringGenerated/RepoControlScreen/#show_remote_info","text":"def show_remote_info(self) Gets info about remote","title":"show_remote_info"},{"location":"DocstringGenerated/RepoControlScreen/#show_commit_info","text":"def show_commit_info(self) Gets info about a particular commit","title":"show_commit_info"},{"location":"DocstringGenerated/RepoControlScreen/#get_recent_commits","text":"def get_recent_commits(self) Gets list of recent commits to branch","title":"get_recent_commits"},{"location":"DocstringGenerated/RepoControlScreen/#create_new_tag","text":"def create_new_tag(self) Creates a new tag","title":"create_new_tag"},{"location":"DocstringGenerated/RepoControlScreen/#show_log","text":"def show_log(self) Displays the git log","title":"show_log"},{"location":"DocstringGenerated/RepoControlScreen/#show_tree","text":"def show_tree(self) Displays git log as a tree","title":"show_tree"},{"location":"DocstringGenerated/RepoControlScreen/#stash_all_changes","text":"def stash_all_changes(self) Stashes all repo changes","title":"stash_all_changes"},{"location":"DocstringGenerated/RepoControlScreen/#unstash_all_changes","text":"def unstash_all_changes(self) Pops the stash","title":"unstash_all_changes"},{"location":"DocstringGenerated/RepoControlScreen/#open_git_diff","text":"def open_git_diff(self) Opens current git diff state","title":"open_git_diff"},{"location":"DocstringGenerated/RepoControlScreen/#open_git_diff_file","text":"def open_git_diff_file(self) Gets the diff for a selected file","title":"open_git_diff_file"},{"location":"DocstringGenerated/RepoControlScreen/#open_editor","text":"def open_editor(self, file=None) Opens an external editor if selected","title":"open_editor"},{"location":"DocstringGenerated/RepoControlScreen/#open_editor_file","text":"def open_editor_file(self) Opens an external editor for a selected file","title":"open_editor_file"},{"location":"DocstringGenerated/RepoControlScreen/#add_all_changes","text":"def add_all_changes(self) Adds all changes to staging","title":"add_all_changes"},{"location":"DocstringGenerated/RepoControlScreen/#add_revert_file","text":"def add_revert_file(self) Adds/Reverts single file from staging","title":"add_revert_file"},{"location":"DocstringGenerated/RepoControlScreen/#ask_new_remote_name","text":"def ask_new_remote_name(self) Opens text box to enter new remote name","title":"ask_new_remote_name"},{"location":"DocstringGenerated/RepoControlScreen/#ask_new_remote_url","text":"def ask_new_remote_url(self, remote_name) Opens text box to ask new remote url","title":"ask_new_remote_url"},{"location":"DocstringGenerated/RepoControlScreen/#parameters_1","text":"Parameter Type Doc remote_name str Remote name entered in previous textbox","title":"Parameters"},{"location":"DocstringGenerated/RepoControlScreen/#add_remote","text":"def add_remote(self, remote_url) Adds remote to git repo","title":"add_remote"},{"location":"DocstringGenerated/RepoControlScreen/#parameters_2","text":"Parameter Type Doc remote_url str URL entered by user","title":"Parameters"},{"location":"DocstringGenerated/RepoControlScreen/#delete_remote","text":"def delete_remote(self) Deletes selected remote from local repo","title":"delete_remote"},{"location":"DocstringGenerated/RepoControlScreen/#rename_remote","text":"def rename_remote(self) Renames selected remote from local repo","title":"rename_remote"},{"location":"DocstringGenerated/RepoControlScreen/#commit","text":"def commit(self) Commits currently staged items","title":"commit"},{"location":"DocstringGenerated/RepoControlScreen/#pull_repo_branch","text":"def pull_repo_branch(self) Pulls from remote","title":"pull_repo_branch"},{"location":"DocstringGenerated/RepoControlScreen/#push_repo_branch","text":"def push_repo_branch(self) Pushes to remote","title":"push_repo_branch"},{"location":"DocstringGenerated/RepoControlScreen/#create_new_branch","text":"def create_new_branch(self) Creates new branch for repository","title":"create_new_branch"},{"location":"DocstringGenerated/RepoControlScreen/#delete_branch","text":"def delete_branch(self) Deletes selected branch","title":"delete_branch"},{"location":"DocstringGenerated/RepoControlScreen/#checkout_branch","text":"def checkout_branch(self) Checks out specified branch","title":"checkout_branch"},{"location":"DocstringGenerated/RepoControlScreen/#merge_branches","text":"def merge_branches(self) Merges selected branch into the currently checked out branch","title":"merge_branches"},{"location":"DocstringGenerated/RepoControlScreen/#revert_merge","text":"def revert_merge(self) Undos the merge that was just performed","title":"revert_merge"},{"location":"DocstringGenerated/RepoControlScreen/#checkout_commit","text":"def checkout_commit(self) Checks out specified commit","title":"checkout_commit"},{"location":"DocstringGenerated/RepoControlScreen/#show_help_overview","text":"def show_help_overview(self) Function that displays help message for overview mode.","title":"show_help_overview"},{"location":"DocstringGenerated/RepoControlScreen/#show_help_add_files_menu","text":"def show_help_add_files_menu(self) Function that displays help message for the add files menu.","title":"show_help_add_files_menu"},{"location":"DocstringGenerated/RepoControlScreen/#show_help_remotes_menu","text":"def show_help_remotes_menu(self) Function that displays help message for the add files menu.","title":"show_help_remotes_menu"},{"location":"DocstringGenerated/RepoControlScreen/#show_help_branch_menu","text":"def show_help_branch_menu(self) Function that displays help message for the add files menu.","title":"show_help_branch_menu"},{"location":"DocstringGenerated/RepoControlScreen/#show_help_commits_menu","text":"def show_help_commits_menu(self) Function that displays help message for the add files menu.","title":"show_help_commits_menu"},{"location":"DocstringGenerated/RepoSelectScreen/","text":"repo_select_screen Manager implementation for CUI screen for selecting different repositories. Classes Class Doc RepoSelectManager Extension of ScreenManager, supports repository selection RepoSelectManager(pyautogit.screen_manager.ScreenManager) class RepoSelectManager(pyautogit.screen_manager.ScreenManager) Class representing the manager for the repo select screen Attributes Attribute Type Doc menu_choices list of str Overriden attribute from base class with expanded menu choices. Methods Method Doc process_menu_selection Override of base class, executes depending on menu selection refresh_status Function that refreshes the repositories in the selection screen ask_delete_repo Function that asks user for confirmation for repo deletion delete_repo Function that deletes a repo show_repo_status Function that displays git status info for current repo clone_new_repo Function that clones new repo from given URL create_new_repo Function that creates a new repo with a given name init def __init__(self, top_manager) Constructor for repo select manager process_menu_selection def process_menu_selection(self, selection) Override of base class, executes depending on menu selection Parameters Parameter Type Doc selection str The user's menu selection initialize_screen_elements def initialize_screen_elements(self) Override of base function. Initializes widgets, returns screen widget set Returns Return Variable Type Doc repo_select_widget_set py_cui.widget_set.WidgetSet Widget set object for repo select screen clear_elements def clear_elements(self) Override of base class function, clears text fields set_initial_values def set_initial_values(self) Override of base function. Sets some initial text for the widgets refresh_status def refresh_status(self) Function that refreshes the repositories in the selection screen ask_delete_repo def ask_delete_repo(self) Function that asks user for confirmation for repo deletion delete_repo def delete_repo(self, to_delete) Function that deletes a repo Parameters Parameter Type Doc to_delete bool User's response of request for confirmation of deletion show_repo_status def show_repo_status(self) Function that shows the current repository status clone_new_repo def clone_new_repo(self) Function that clones new repo from given URL create_new_repo def create_new_repo(self) Function that creates a new repo with a given name","title":"Repo Select"},{"location":"DocstringGenerated/RepoSelectScreen/#repo_select_screen","text":"Manager implementation for CUI screen for selecting different repositories.","title":"repo_select_screen"},{"location":"DocstringGenerated/RepoSelectScreen/#classes","text":"Class Doc RepoSelectManager Extension of ScreenManager, supports repository selection","title":"Classes"},{"location":"DocstringGenerated/RepoSelectScreen/#reposelectmanagerpyautogitscreen_managerscreenmanager","text":"class RepoSelectManager(pyautogit.screen_manager.ScreenManager) Class representing the manager for the repo select screen","title":"RepoSelectManager(pyautogit.screen_manager.ScreenManager)"},{"location":"DocstringGenerated/RepoSelectScreen/#attributes","text":"Attribute Type Doc menu_choices list of str Overriden attribute from base class with expanded menu choices.","title":"Attributes"},{"location":"DocstringGenerated/RepoSelectScreen/#methods","text":"Method Doc process_menu_selection Override of base class, executes depending on menu selection refresh_status Function that refreshes the repositories in the selection screen ask_delete_repo Function that asks user for confirmation for repo deletion delete_repo Function that deletes a repo show_repo_status Function that displays git status info for current repo clone_new_repo Function that clones new repo from given URL create_new_repo Function that creates a new repo with a given name","title":"Methods"},{"location":"DocstringGenerated/RepoSelectScreen/#init","text":"def __init__(self, top_manager) Constructor for repo select manager","title":"init"},{"location":"DocstringGenerated/RepoSelectScreen/#process_menu_selection","text":"def process_menu_selection(self, selection) Override of base class, executes depending on menu selection","title":"process_menu_selection"},{"location":"DocstringGenerated/RepoSelectScreen/#parameters","text":"Parameter Type Doc selection str The user's menu selection","title":"Parameters"},{"location":"DocstringGenerated/RepoSelectScreen/#initialize_screen_elements","text":"def initialize_screen_elements(self) Override of base function. Initializes widgets, returns screen widget set","title":"initialize_screen_elements"},{"location":"DocstringGenerated/RepoSelectScreen/#returns","text":"Return Variable Type Doc repo_select_widget_set py_cui.widget_set.WidgetSet Widget set object for repo select screen","title":"Returns"},{"location":"DocstringGenerated/RepoSelectScreen/#clear_elements","text":"def clear_elements(self) Override of base class function, clears text fields","title":"clear_elements"},{"location":"DocstringGenerated/RepoSelectScreen/#set_initial_values","text":"def set_initial_values(self) Override of base function. Sets some initial text for the widgets","title":"set_initial_values"},{"location":"DocstringGenerated/RepoSelectScreen/#refresh_status","text":"def refresh_status(self) Function that refreshes the repositories in the selection screen","title":"refresh_status"},{"location":"DocstringGenerated/RepoSelectScreen/#ask_delete_repo","text":"def ask_delete_repo(self) Function that asks user for confirmation for repo deletion","title":"ask_delete_repo"},{"location":"DocstringGenerated/RepoSelectScreen/#delete_repo","text":"def delete_repo(self, to_delete) Function that deletes a repo","title":"delete_repo"},{"location":"DocstringGenerated/RepoSelectScreen/#parameters_1","text":"Parameter Type Doc to_delete bool User's response of request for confirmation of deletion","title":"Parameters"},{"location":"DocstringGenerated/RepoSelectScreen/#show_repo_status","text":"def show_repo_status(self) Function that shows the current repository status","title":"show_repo_status"},{"location":"DocstringGenerated/RepoSelectScreen/#clone_new_repo","text":"def clone_new_repo(self) Function that clones new repo from given URL","title":"clone_new_repo"},{"location":"DocstringGenerated/RepoSelectScreen/#create_new_repo","text":"def create_new_repo(self) Function that creates a new repo with a given name","title":"create_new_repo"},{"location":"DocstringGenerated/ScreenManager/","text":"screen_manager File containing class that acts as a parent class to all sub-screen managers The base screen manager is responsible for defining how CUI elements are assigned to screens, as well as what the screen must do to refresh its status. Also supports performing long (async) operations, and running custom commands Classes Class Doc ScreenManager Main parent screen manager class for all subscreens ScreenManager class ScreenManager Main parent screen manager class. Contains common functionality for showing command results, handling credentials, commands, and long operations. Attributes Attribute Type Doc manager PyAutogitManager Driver engine manager message str A variable to store messages accross functions status int A variable to store status codes accross functions utility_var obj A variable that can be used to store any data across functions menu_choices list of str Overriden by children, list of options that pop up in menu info_panel py_cui.widgets.TextBlock The main textblock on the screen, used to display status information. Methods Method Doc process_menu_selection Overriden by child, processes based on menu item selection. show_command_result Displays the result of running a particular command. If more than one line of output, prints to info panel, otherwise, shows popup. show_status_long_op Used instead of show_command_result for long (async) operations show_menu Opens the menu for the screen manager object refresh_git_status Function called after each git operation by children. Must be overriden handle_user_command Processes a custom command from the user ask_custom_command Prompts user to enter a custom command execute_long_operation Wrapper function that should be used as lambda operation. Allows for performing long async operation while loading icon runs init def __init__(self, top_manager, screen_type) Constructor for ScreenManager initialize_screen_elements def initialize_screen_elements(self) Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object. process_menu_selection def process_menu_selection(self, selection) Processes based on selection returned from the menu Parameters Parameter Type Doc selection str An element of the self.menu_choices list selected by user show_menu def show_menu(self) Opens the menu using the menu item list for screen manager instance show_command_result def show_command_result(self, out, err, show_on_success = True, command_name='Command', success_message='Success', error_message='Error') Function that displays the result of stdout/err for an external command. Parameters Parameter Type Doc out str stdout string from command err str stderr string from command show_on_success bool Set to false to show no messages on success. (ex. git log doesnt need success message) command_name str name of command run. success_message str message to show on successful completion error_message str message to show on unsuccessful completion show_status_long_op def show_status_long_op(self, name='Command', succ_message=\"Success\", err_message = \"Error\") Shows the status of a long(async) operation on success completion Parameters Parameter Type Doc name str name of command run. succ_message str message to show on successful completion err_message str message to show on unsuccessful completion refresh_status def refresh_status(self) Function that is fired after each git operation. Implement in subclasses. clear_elements def clear_elements(self) Function that clears entries from widgets for reuse set_initial_values def set_initial_values(self) Function that sets initial values for widgets in screen handle_user_command def handle_user_command(self, command) Handles custom user command. Parameters Parameter Type Doc command str The string command entered by the user ask_custom_command def ask_custom_command(self) Function that prompts user to enter custom command execute_long_operation def execute_long_operation(self, loading_messge, long_op_function, credentials_required=False) Wrapper function that allows for executing long operations w/ credential requirements. Parameters Parameter Type Doc loading_message str Message displayed while async op is performed long_op_function no-arg or lambda function Function that is fired in an async second thread credentials_required bool If true, prompts to enter credentials before starting async op","title":"Screen Manager"},{"location":"DocstringGenerated/ScreenManager/#screen_manager","text":"File containing class that acts as a parent class to all sub-screen managers The base screen manager is responsible for defining how CUI elements are assigned to screens, as well as what the screen must do to refresh its status. Also supports performing long (async) operations, and running custom commands","title":"screen_manager"},{"location":"DocstringGenerated/ScreenManager/#classes","text":"Class Doc ScreenManager Main parent screen manager class for all subscreens","title":"Classes"},{"location":"DocstringGenerated/ScreenManager/#screenmanager","text":"class ScreenManager Main parent screen manager class. Contains common functionality for showing command results, handling credentials, commands, and long operations.","title":"ScreenManager"},{"location":"DocstringGenerated/ScreenManager/#attributes","text":"Attribute Type Doc manager PyAutogitManager Driver engine manager message str A variable to store messages accross functions status int A variable to store status codes accross functions utility_var obj A variable that can be used to store any data across functions menu_choices list of str Overriden by children, list of options that pop up in menu info_panel py_cui.widgets.TextBlock The main textblock on the screen, used to display status information.","title":"Attributes"},{"location":"DocstringGenerated/ScreenManager/#methods","text":"Method Doc process_menu_selection Overriden by child, processes based on menu item selection. show_command_result Displays the result of running a particular command. If more than one line of output, prints to info panel, otherwise, shows popup. show_status_long_op Used instead of show_command_result for long (async) operations show_menu Opens the menu for the screen manager object refresh_git_status Function called after each git operation by children. Must be overriden handle_user_command Processes a custom command from the user ask_custom_command Prompts user to enter a custom command execute_long_operation Wrapper function that should be used as lambda operation. Allows for performing long async operation while loading icon runs","title":"Methods"},{"location":"DocstringGenerated/ScreenManager/#init","text":"def __init__(self, top_manager, screen_type) Constructor for ScreenManager","title":"init"},{"location":"DocstringGenerated/ScreenManager/#initialize_screen_elements","text":"def initialize_screen_elements(self) Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object.","title":"initialize_screen_elements"},{"location":"DocstringGenerated/ScreenManager/#process_menu_selection","text":"def process_menu_selection(self, selection) Processes based on selection returned from the menu","title":"process_menu_selection"},{"location":"DocstringGenerated/ScreenManager/#parameters","text":"Parameter Type Doc selection str An element of the self.menu_choices list selected by user","title":"Parameters"},{"location":"DocstringGenerated/ScreenManager/#show_menu","text":"def show_menu(self) Opens the menu using the menu item list for screen manager instance","title":"show_menu"},{"location":"DocstringGenerated/ScreenManager/#show_command_result","text":"def show_command_result(self, out, err, show_on_success = True, command_name='Command', success_message='Success', error_message='Error') Function that displays the result of stdout/err for an external command.","title":"show_command_result"},{"location":"DocstringGenerated/ScreenManager/#parameters_1","text":"Parameter Type Doc out str stdout string from command err str stderr string from command show_on_success bool Set to false to show no messages on success. (ex. git log doesnt need success message) command_name str name of command run. success_message str message to show on successful completion error_message str message to show on unsuccessful completion","title":"Parameters"},{"location":"DocstringGenerated/ScreenManager/#show_status_long_op","text":"def show_status_long_op(self, name='Command', succ_message=\"Success\", err_message = \"Error\") Shows the status of a long(async) operation on success completion","title":"show_status_long_op"},{"location":"DocstringGenerated/ScreenManager/#parameters_2","text":"Parameter Type Doc name str name of command run. succ_message str message to show on successful completion err_message str message to show on unsuccessful completion","title":"Parameters"},{"location":"DocstringGenerated/ScreenManager/#refresh_status","text":"def refresh_status(self) Function that is fired after each git operation. Implement in subclasses.","title":"refresh_status"},{"location":"DocstringGenerated/ScreenManager/#clear_elements","text":"def clear_elements(self) Function that clears entries from widgets for reuse","title":"clear_elements"},{"location":"DocstringGenerated/ScreenManager/#set_initial_values","text":"def set_initial_values(self) Function that sets initial values for widgets in screen","title":"set_initial_values"},{"location":"DocstringGenerated/ScreenManager/#handle_user_command","text":"def handle_user_command(self, command) Handles custom user command.","title":"handle_user_command"},{"location":"DocstringGenerated/ScreenManager/#parameters_3","text":"Parameter Type Doc command str The string command entered by the user","title":"Parameters"},{"location":"DocstringGenerated/ScreenManager/#ask_custom_command","text":"def ask_custom_command(self) Function that prompts user to enter custom command","title":"ask_custom_command"},{"location":"DocstringGenerated/ScreenManager/#execute_long_operation","text":"def execute_long_operation(self, loading_messge, long_op_function, credentials_required=False) Wrapper function that allows for executing long operations w/ credential requirements.","title":"execute_long_operation"},{"location":"DocstringGenerated/ScreenManager/#parameters_4","text":"Parameter Type Doc loading_message str Message displayed while async op is performed long_op_function no-arg or lambda function Function that is fired in an async second thread credentials_required bool If true, prompts to enter credentials before starting async op","title":"Parameters"},{"location":"DocstringGenerated/SettingsScreen/","text":"settings_screen A subscreen that allows for setting a variety of pyautogit settings. Classes Class Doc SettingsScreen extends ScreenManager base, adds widgets for controlling pyautogit settings. SettingsScreen(pyautogit.screen_manager.ScreenManager) class SettingsScreen(pyautogit.screen_manager.ScreenManager) Class representing settings subscreen for pyautogit Attributes Attribute Type Doc current_info_log str The current settings log text show_settings_log bool Toggle for showing settings log Methods Method Doc initialize_screen_elements Override of base class, initializes elements, returns widget set ask_log_file_path Prompts user to enter log file path get_settings_ascii_art Gets an ascii art settings title toggle_logging Function that toggles logging for pyautogit update_log_file_path Function that updates the target log file path refresh_status Override of base class refresh function init def __init__(self, top_manager) Constructor for SettingsScreen initialize_screen_elements def initialize_screen_elements(self) Override of base class function. Initializes widgets, and returns widget set Returns Return Variable Type Doc settings_widget_set py_cui.widget_set.WidgetSet Widget set object for rsettings screen set_initial_values def set_initial_values(self) Function that sets initial status bar text for settings window add_to_settings_log def add_to_settings_log(self, text) Function that updates the settings info log panel Parameters Parameter Type Doc text str New log item to write to settings info panel fetch_about_file def fetch_about_file(self, file) Function that grabs file from github and displays it in info panel Parameters Parameter Type Doc file str Filename to fetch from github repository revert_settings_log def revert_settings_log(self) Function that resets to showing settings info open_web_docs def open_web_docs(self) Function tasked with open docs in external browser show_tutorial def show_tutorial(self) Function that demonstrates tutorial for using pyautogit ask_log_file_path def ask_log_file_path(self) Prompts user to enter log file path get_settings_ascii_art def get_settings_ascii_art(self) Gets ascii art settings logo Returns Return Variable Type Doc settings_message str Block letter ascii art settings logo toggle_editor_type def toggle_editor_type(self) Function that toggles between internal and external editor toggle_logging def toggle_logging(self) Function that enables/disables logging ask_default_editor def ask_default_editor(self) Function that asks user for editor, and then refreshes update_default_editor def update_default_editor(self, new_editor) Function that updates the new default editor Parameters Parameter Type Doc new_editor str command used to open external editor update_log_file_path def update_log_file_path(self, new_log_file_path, default_path=False) Function that updates log file path if valid Parameters Parameter Type Doc new_log_file_path str Path to new log file refresh_status def refresh_status(self) Override of base class refresh function.","title":"Settings Screen"},{"location":"DocstringGenerated/SettingsScreen/#settings_screen","text":"A subscreen that allows for setting a variety of pyautogit settings.","title":"settings_screen"},{"location":"DocstringGenerated/SettingsScreen/#classes","text":"Class Doc SettingsScreen extends ScreenManager base, adds widgets for controlling pyautogit settings.","title":"Classes"},{"location":"DocstringGenerated/SettingsScreen/#settingsscreenpyautogitscreen_managerscreenmanager","text":"class SettingsScreen(pyautogit.screen_manager.ScreenManager) Class representing settings subscreen for pyautogit","title":"SettingsScreen(pyautogit.screen_manager.ScreenManager)"},{"location":"DocstringGenerated/SettingsScreen/#attributes","text":"Attribute Type Doc current_info_log str The current settings log text show_settings_log bool Toggle for showing settings log","title":"Attributes"},{"location":"DocstringGenerated/SettingsScreen/#methods","text":"Method Doc initialize_screen_elements Override of base class, initializes elements, returns widget set ask_log_file_path Prompts user to enter log file path get_settings_ascii_art Gets an ascii art settings title toggle_logging Function that toggles logging for pyautogit update_log_file_path Function that updates the target log file path refresh_status Override of base class refresh function","title":"Methods"},{"location":"DocstringGenerated/SettingsScreen/#init","text":"def __init__(self, top_manager) Constructor for SettingsScreen","title":"init"},{"location":"DocstringGenerated/SettingsScreen/#initialize_screen_elements","text":"def initialize_screen_elements(self) Override of base class function. Initializes widgets, and returns widget set","title":"initialize_screen_elements"},{"location":"DocstringGenerated/SettingsScreen/#returns","text":"Return Variable Type Doc settings_widget_set py_cui.widget_set.WidgetSet Widget set object for rsettings screen","title":"Returns"},{"location":"DocstringGenerated/SettingsScreen/#set_initial_values","text":"def set_initial_values(self) Function that sets initial status bar text for settings window","title":"set_initial_values"},{"location":"DocstringGenerated/SettingsScreen/#add_to_settings_log","text":"def add_to_settings_log(self, text) Function that updates the settings info log panel","title":"add_to_settings_log"},{"location":"DocstringGenerated/SettingsScreen/#parameters","text":"Parameter Type Doc text str New log item to write to settings info panel","title":"Parameters"},{"location":"DocstringGenerated/SettingsScreen/#fetch_about_file","text":"def fetch_about_file(self, file) Function that grabs file from github and displays it in info panel","title":"fetch_about_file"},{"location":"DocstringGenerated/SettingsScreen/#parameters_1","text":"Parameter Type Doc file str Filename to fetch from github repository","title":"Parameters"},{"location":"DocstringGenerated/SettingsScreen/#revert_settings_log","text":"def revert_settings_log(self) Function that resets to showing settings info","title":"revert_settings_log"},{"location":"DocstringGenerated/SettingsScreen/#open_web_docs","text":"def open_web_docs(self) Function tasked with open docs in external browser","title":"open_web_docs"},{"location":"DocstringGenerated/SettingsScreen/#show_tutorial","text":"def show_tutorial(self) Function that demonstrates tutorial for using pyautogit","title":"show_tutorial"},{"location":"DocstringGenerated/SettingsScreen/#ask_log_file_path","text":"def ask_log_file_path(self) Prompts user to enter log file path","title":"ask_log_file_path"},{"location":"DocstringGenerated/SettingsScreen/#get_settings_ascii_art","text":"def get_settings_ascii_art(self) Gets ascii art settings logo","title":"get_settings_ascii_art"},{"location":"DocstringGenerated/SettingsScreen/#returns_1","text":"Return Variable Type Doc settings_message str Block letter ascii art settings logo","title":"Returns"},{"location":"DocstringGenerated/SettingsScreen/#toggle_editor_type","text":"def toggle_editor_type(self) Function that toggles between internal and external editor","title":"toggle_editor_type"},{"location":"DocstringGenerated/SettingsScreen/#toggle_logging","text":"def toggle_logging(self) Function that enables/disables logging","title":"toggle_logging"},{"location":"DocstringGenerated/SettingsScreen/#ask_default_editor","text":"def ask_default_editor(self) Function that asks user for editor, and then refreshes","title":"ask_default_editor"},{"location":"DocstringGenerated/SettingsScreen/#update_default_editor","text":"def update_default_editor(self, new_editor) Function that updates the new default editor","title":"update_default_editor"},{"location":"DocstringGenerated/SettingsScreen/#parameters_2","text":"Parameter Type Doc new_editor str command used to open external editor","title":"Parameters"},{"location":"DocstringGenerated/SettingsScreen/#update_log_file_path","text":"def update_log_file_path(self, new_log_file_path, default_path=False) Function that updates log file path if valid","title":"update_log_file_path"},{"location":"DocstringGenerated/SettingsScreen/#parameters_3","text":"Parameter Type Doc new_log_file_path str Path to new log file","title":"Parameters"},{"location":"DocstringGenerated/SettingsScreen/#refresh_status","text":"def refresh_status(self) Override of base class refresh function.","title":"refresh_status"},{"location":"scripts/npdoc2md/","text":"npdoc2md A simple python script for auto-converting numpy-style python docstrings to markdown for use with mkdocs, an entire package at a time. Installation For now, npdoc2md can be used by cloning this repository: git clone https://github.com/jwlodek/npdoc2md In the future, it will also be available with pip : pip install npdoc2md Usage Below is the result of running npdoc2md with the -h flag: usage: npdoc2md.py [-h] [-i IGNORE [IGNORE ...]] [-d] target output positional arguments: target The path to the target python project or file to convert. output The output directory where the markdown files should be placed. optional arguments: -h, --help show this help message and exit -i IGNORE [IGNORE ...], --ignore IGNORE [IGNORE ...] List of filenames/directories to ignore. -d, --debug Add this flag to print detailed log messages during conversion. Basic usage will require at least a target and output locations that are valid. python npdoc2md.py C:\\Users\\jwlodek\\demo C:\\Users\\jwlodek\\demo_output You can also specify to enable debug printing with -d , and files to ignore with -i followed by a list of files. For example to autogenerate py_cui docs, the following command is run: python npdoc2md.py ..\\..\\..\\py_cui ..\\..\\DocstringGenerated -i statusbar.py errors.py which will ignore the statusbar.py and errors.py files. The npdoc2md script will recursively search the target (if it is a folder) for files ending with the .py extension, and will generate a markdown file for each one not specified in the ignore section. Doc Rules You must follow strict docstring style rules to use npdoc2md: Each class, function's docstring must start and end with \"\"\" , and the initial description must be right after the initial \"\"\" . Ex: \"\"\"Hello this is a function Use numpy style guidelines for Classes , Functions , Methods , Attributes , Parameters , Returns lists The Returns list should give a return value name and type with the doc message Examples As stated previously, py_cui uses npdoc2md to auto-generate documentation to use with mkdocs . You may also see the Npdoc2md.md file in this repository which was generated by running this script on itself: py .\\npdoc2md.py .\\npdoc2md.py .\\example\\. License MIT License Copyright (c) 2020, Jakub Wlodek","title":"npdoc2md"},{"location":"scripts/npdoc2md/#npdoc2md","text":"A simple python script for auto-converting numpy-style python docstrings to markdown for use with mkdocs, an entire package at a time.","title":"npdoc2md"},{"location":"scripts/npdoc2md/#installation","text":"For now, npdoc2md can be used by cloning this repository: git clone https://github.com/jwlodek/npdoc2md In the future, it will also be available with pip : pip install npdoc2md","title":"Installation"},{"location":"scripts/npdoc2md/#usage","text":"Below is the result of running npdoc2md with the -h flag: usage: npdoc2md.py [-h] [-i IGNORE [IGNORE ...]] [-d] target output positional arguments: target The path to the target python project or file to convert. output The output directory where the markdown files should be placed. optional arguments: -h, --help show this help message and exit -i IGNORE [IGNORE ...], --ignore IGNORE [IGNORE ...] List of filenames/directories to ignore. -d, --debug Add this flag to print detailed log messages during conversion. Basic usage will require at least a target and output locations that are valid. python npdoc2md.py C:\\Users\\jwlodek\\demo C:\\Users\\jwlodek\\demo_output You can also specify to enable debug printing with -d , and files to ignore with -i followed by a list of files. For example to autogenerate py_cui docs, the following command is run: python npdoc2md.py ..\\..\\..\\py_cui ..\\..\\DocstringGenerated -i statusbar.py errors.py which will ignore the statusbar.py and errors.py files. The npdoc2md script will recursively search the target (if it is a folder) for files ending with the .py extension, and will generate a markdown file for each one not specified in the ignore section.","title":"Usage"},{"location":"scripts/npdoc2md/#doc-rules","text":"You must follow strict docstring style rules to use npdoc2md: Each class, function's docstring must start and end with \"\"\" , and the initial description must be right after the initial \"\"\" . Ex: \"\"\"Hello this is a function Use numpy style guidelines for Classes , Functions , Methods , Attributes , Parameters , Returns lists The Returns list should give a return value name and type with the doc message","title":"Doc Rules"},{"location":"scripts/npdoc2md/#examples","text":"As stated previously, py_cui uses npdoc2md to auto-generate documentation to use with mkdocs . You may also see the Npdoc2md.md file in this repository which was generated by running this script on itself: py .\\npdoc2md.py .\\npdoc2md.py .\\example\\.","title":"Examples"},{"location":"scripts/npdoc2md/#license","text":"MIT License Copyright (c) 2020, Jakub Wlodek","title":"License"},{"location":"scripts/npdoc2md/example/","text":"npdoc2md Example Please see the Npdoc2md.md , and GenerateNpDocs.md files in this directory to see the result of running npdoc2md on itself, and on the other included script.","title":"npdoc2md Example"},{"location":"scripts/npdoc2md/example/#npdoc2md-example","text":"Please see the Npdoc2md.md , and GenerateNpDocs.md files in this directory to see the result of running npdoc2md on itself, and on the other included script.","title":"npdoc2md Example"},{"location":"scripts/npdoc2md/example/Npdoc2md/","text":"npdoc2md Script for autogenerating markdown documentation given path to python package with numpy-style comments @author: Jakub Wlodek @created: Feb-6-2020 Classes Class Doc DocStringAttribute Stores docstring attribute and its elements. Ex(Parameters) ItemInstance Base class for encountered programmatic instances FunctionInstance Represents an encountered function or method ClassInstance Represents an encountered class ModuleInstance Represents an encountered module ConversionItem Single file that needs to be converted. Corresponds to one ModuleInstance object MDConverter Main conversion driver class Functions Function Doc add_docstring_to_instance Function that parses a docstring into data structures and adds it to instance object grab_module_instance Function that takes a module, and generates all instance objects in a top level module instance generate_conversion_item_list Generates conversion item objects given target err_exit Exits program with an error check_input_output_valid Checks if given inputs are valid parse_args Parses user arguments DocStringAttribute class DocStringAttribute Stores docstring attribute and its elements. Ex(Parameters) Attributes Attribute Type Doc attribute_name str Name of the attribute attribute_elements list of list of str List of elements assigned to the attribute for the current instance init def __init__(self, attribute_name) ItemInstance class ItemInstance Base class for encountered programmatic instances Attributes Attribute Type Doc name str Name of the instance (function, class, module name) usage str How to envoke function, method simple_description str Base description detailed description str Additional detailed description descriptiors dict of str -> DocStringAttribute Map of all docstring attribute descriptors Methods Method Doc set_simple_description Initializes the simple description add_to_detailed_description Appends to the detailed description add_descriptor Adds a new descriptor generate_md_table_from_descriptor Generates markdown table given descriptor get_usage_str Generates usage markdown convert_to_markdown Converts current instance state to markdown format Override of base format class init def __init__(self, name: str, usage: str = None) Constructor for ItemInstance set_simple_description def set_simple_description(self, simple_description: str) -> None Initializes the simple description Parameters Parameter Type Doc simple_description str New simple description add_to_detailed_description def add_to_detailed_description(self, detailed_description_line: str) -> None Appends to the detailed description Parameters Parameter Type Doc detailed_description_line str New description line add_descriptor def add_descriptor(self, descriptor_type: str, descriptor_elements: StringList) Creates a new descriptor Parameters Parameter Type Doc descriptor_type str New descriptor type descriptor_elements list of str New descriptor elements generate_md_table_from_descriptor def generate_md_table_from_descriptor(self, descriptor: str) -> str Generates markdown table for descriptor Parameters Parameter Type Doc descriptor str Descriptor type Returns Return Variable Type Doc md str Markdown string get_usage_str def get_usage_str(self) -> str Gets markdown usage string Returns Return Variable Type Doc md str Markdown string convert_to_markdown def convert_to_markdown(self, heading_level: int) -> str Generates markdown for instance Parameters Parameter Type Doc heading_level int The heading emphasis for the instance Returns Return Variable Type Doc md str Markdown string format def __format__(self, fmt) Override of standard format function Parameters Parameter Type Doc fmt format The given format FunctionInstance(ItemInstance) class FunctionInstance(ItemInstance) Class representing function instances init def __init__(self, name, usage) Constructor for function instance ClassInstance(ItemInstance) class ClassInstance(ItemInstance) Class representing class instances Methods Method Doc add_sub_instance Adds a sub-instance (methods) convert_to_markdown Override of base class, returns its own markdown plus sub instances init def __init__(self, name, usage) Constructor for Class instance add_sub_instance def add_sub_instance(self, instance: ItemInstance) -> None Adds a sub-instance (methods) instance : ItemInstance item instance to add as sub-instance convert_to_markdown def convert_to_markdown(self, heading_level: int) -> str Override of base class, returns its own markdown plus sub instances Parameters Parameter Type Doc heading_level int The heading emphasis for the instance Returns Return Variable Type Doc md str Markdown string ModuleInstance(ItemInstance) class ModuleInstance(ItemInstance) Top Level module instance class Methods Method Doc add_sub_instance Adds a sub-instance (methods) convert_to_markdown Override of base class, returns its own markdown plus sub instances init def __init__(self, name) Constructor for module instance add_sub_instance def add_sub_instance(self, instance: ItemInstance) -> None Adds a sub-instance (methods) instance : ItemInstance item instance to add as sub-instance convert_to_markdown def convert_to_markdown(self, heading_level: int) -> str Override of base class, returns its own markdown plus sub instances Parameters Parameter Type Doc heading_level int The heading emphasis for the instance Returns Return Variable Type Doc md str Markdown string add_docstring_to_instance def add_docstring_to_instance(instance: ItemInstance, doc_string: StringList) -> None Function that parses docstring to data structures and adds to instance Parameters Parameter Type Doc instance ItemInstance current instance doc_string list of str Current instance's docstring as list of lines grab_module_instance def grab_module_instance(file_contents: StringList, file_name: str, parent_package=None) -> InstanceList Function that generates complete instance object for module Parameters Parameter Type Doc file_contents list of str Lines in python module file file_name str Name of the file or module parent_package=None str name of the parent package (if applicable) Returns Return Variable Type Doc top_module_instance ModuleInstance module instance object at top level ConversionItem class ConversionItem Class representing single file to convert Attributes Attribute Type Doc parent_package str Parent package for file (if applicable) file_path os.PathLike Source file path file_name str Source file name md_file_name str Output markdown file name converted_markdown str Markdown for the module module_instance ModuleInstance Converted module instance Methods Method Doc collect_docstrings Collects docstrings from file generate_markdown Generates markdown for file init def __init__(self, file_path: os.PathLike, parent_package: str=None) Constructor for conversion item class collect_docstrings def collect_docstrings(self) -> None Collects docstrings from file generate_markdown def generate_markdown(self) -> None Generates markdown for file MDConverter class MDConverter Main Driver class for script Attributes Attribute Type Doc conversion_item_list ConversionList list of items to convert output_loc os.PathLike Output location for markdown Methods Method Doc convert_doc_to_md Converts all docstrings to markdown generate_markdown_for_item Writes generated markdown to file execute_conversion_process Main driver function init def __init__(self, conversion_item_list: ConversionList, output_loc: os.PathLike) Constructor for MDConverter convert_doc_to_md def convert_doc_to_md(self, conversion_item: ConversionItem) -> None Converts docstrings to markdown internally generate_markdown_for_item def generate_markdown_for_item(self, conversion_item: ConversionItem) -> None Generates a markdown file for given conversion item Parameters Parameter Type Doc conversion_item ConversionItem Conversion item for which to create markdown file execute_conversion_process def execute_conversion_process(self) -> None Main Driver function for converter generate_conversion_item_list def generate_conversion_item_list(target: os.PathLike, ignore_list: StringList) -> ConversionList Generates list of all conversion items Parameters Parameter Type Doc target os.PathLike target of python module or package ignore_list list of str List of filenames to ignore Returns Return Variable Type Doc conversion_item_list ConversionList List of all discovered files as conversion items err_exit def err_exit(message: str, code: int) -> None Exits program with error Parameters Parameter Type Doc message str error message code int exit code check_input_output_valid def check_input_output_valid(target: os.PathLike, output: os.PathLike, ignore_list: StringList) -> (bool, int, str) Checks if given input was valid Parameters Parameter Type Doc target os.PathLike target input location output os.PathLike Markdown output location ignore_list list of str list of filenames to ignore Returns Return Variable Type Doc valid bool True if valid, false otherwise err_code int Error code if applicable err_message str Error message if applicable parse_args def parse_args() -> (MDConverter, bool) Function that parses user arguments Returns Return Variable Type Doc converter MDConverter Main converter object debug bool toggle for debug printing","title":"npdoc2md"},{"location":"scripts/npdoc2md/example/Npdoc2md/#npdoc2md","text":"Script for autogenerating markdown documentation given path to python package with numpy-style comments @author: Jakub Wlodek @created: Feb-6-2020","title":"npdoc2md"},{"location":"scripts/npdoc2md/example/Npdoc2md/#classes","text":"Class Doc DocStringAttribute Stores docstring attribute and its elements. Ex(Parameters) ItemInstance Base class for encountered programmatic instances FunctionInstance Represents an encountered function or method ClassInstance Represents an encountered class ModuleInstance Represents an encountered module ConversionItem Single file that needs to be converted. Corresponds to one ModuleInstance object MDConverter Main conversion driver class","title":"Classes"},{"location":"scripts/npdoc2md/example/Npdoc2md/#functions","text":"Function Doc add_docstring_to_instance Function that parses a docstring into data structures and adds it to instance object grab_module_instance Function that takes a module, and generates all instance objects in a top level module instance generate_conversion_item_list Generates conversion item objects given target err_exit Exits program with an error check_input_output_valid Checks if given inputs are valid parse_args Parses user arguments","title":"Functions"},{"location":"scripts/npdoc2md/example/Npdoc2md/#docstringattribute","text":"class DocStringAttribute Stores docstring attribute and its elements. Ex(Parameters)","title":"DocStringAttribute"},{"location":"scripts/npdoc2md/example/Npdoc2md/#attributes","text":"Attribute Type Doc attribute_name str Name of the attribute attribute_elements list of list of str List of elements assigned to the attribute for the current instance","title":"Attributes"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init","text":"def __init__(self, attribute_name)","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#iteminstance","text":"class ItemInstance Base class for encountered programmatic instances","title":"ItemInstance"},{"location":"scripts/npdoc2md/example/Npdoc2md/#attributes_1","text":"Attribute Type Doc name str Name of the instance (function, class, module name) usage str How to envoke function, method simple_description str Base description detailed description str Additional detailed description descriptiors dict of str -> DocStringAttribute Map of all docstring attribute descriptors","title":"Attributes"},{"location":"scripts/npdoc2md/example/Npdoc2md/#methods","text":"Method Doc set_simple_description Initializes the simple description add_to_detailed_description Appends to the detailed description add_descriptor Adds a new descriptor generate_md_table_from_descriptor Generates markdown table given descriptor get_usage_str Generates usage markdown convert_to_markdown Converts current instance state to markdown format Override of base format class","title":"Methods"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_1","text":"def __init__(self, name: str, usage: str = None) Constructor for ItemInstance","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#set_simple_description","text":"def set_simple_description(self, simple_description: str) -> None Initializes the simple description","title":"set_simple_description"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters","text":"Parameter Type Doc simple_description str New simple description","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#add_to_detailed_description","text":"def add_to_detailed_description(self, detailed_description_line: str) -> None Appends to the detailed description","title":"add_to_detailed_description"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_1","text":"Parameter Type Doc detailed_description_line str New description line","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#add_descriptor","text":"def add_descriptor(self, descriptor_type: str, descriptor_elements: StringList) Creates a new descriptor","title":"add_descriptor"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_2","text":"Parameter Type Doc descriptor_type str New descriptor type descriptor_elements list of str New descriptor elements","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#generate_md_table_from_descriptor","text":"def generate_md_table_from_descriptor(self, descriptor: str) -> str Generates markdown table for descriptor","title":"generate_md_table_from_descriptor"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_3","text":"Parameter Type Doc descriptor str Descriptor type","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns","text":"Return Variable Type Doc md str Markdown string","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#get_usage_str","text":"def get_usage_str(self) -> str Gets markdown usage string","title":"get_usage_str"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_1","text":"Return Variable Type Doc md str Markdown string","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#convert_to_markdown","text":"def convert_to_markdown(self, heading_level: int) -> str Generates markdown for instance","title":"convert_to_markdown"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_4","text":"Parameter Type Doc heading_level int The heading emphasis for the instance","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_2","text":"Return Variable Type Doc md str Markdown string","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#format","text":"def __format__(self, fmt) Override of standard format function","title":"format"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_5","text":"Parameter Type Doc fmt format The given format","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#functioninstanceiteminstance","text":"class FunctionInstance(ItemInstance) Class representing function instances","title":"FunctionInstance(ItemInstance)"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_2","text":"def __init__(self, name, usage) Constructor for function instance","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#classinstanceiteminstance","text":"class ClassInstance(ItemInstance) Class representing class instances","title":"ClassInstance(ItemInstance)"},{"location":"scripts/npdoc2md/example/Npdoc2md/#methods_1","text":"Method Doc add_sub_instance Adds a sub-instance (methods) convert_to_markdown Override of base class, returns its own markdown plus sub instances","title":"Methods"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_3","text":"def __init__(self, name, usage) Constructor for Class instance","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#add_sub_instance","text":"def add_sub_instance(self, instance: ItemInstance) -> None Adds a sub-instance (methods) instance : ItemInstance item instance to add as sub-instance","title":"add_sub_instance"},{"location":"scripts/npdoc2md/example/Npdoc2md/#convert_to_markdown_1","text":"def convert_to_markdown(self, heading_level: int) -> str Override of base class, returns its own markdown plus sub instances","title":"convert_to_markdown"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_6","text":"Parameter Type Doc heading_level int The heading emphasis for the instance","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_3","text":"Return Variable Type Doc md str Markdown string","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#moduleinstanceiteminstance","text":"class ModuleInstance(ItemInstance) Top Level module instance class","title":"ModuleInstance(ItemInstance)"},{"location":"scripts/npdoc2md/example/Npdoc2md/#methods_2","text":"Method Doc add_sub_instance Adds a sub-instance (methods) convert_to_markdown Override of base class, returns its own markdown plus sub instances","title":"Methods"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_4","text":"def __init__(self, name) Constructor for module instance","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#add_sub_instance_1","text":"def add_sub_instance(self, instance: ItemInstance) -> None Adds a sub-instance (methods) instance : ItemInstance item instance to add as sub-instance","title":"add_sub_instance"},{"location":"scripts/npdoc2md/example/Npdoc2md/#convert_to_markdown_2","text":"def convert_to_markdown(self, heading_level: int) -> str Override of base class, returns its own markdown plus sub instances","title":"convert_to_markdown"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_7","text":"Parameter Type Doc heading_level int The heading emphasis for the instance","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_4","text":"Return Variable Type Doc md str Markdown string","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#add_docstring_to_instance","text":"def add_docstring_to_instance(instance: ItemInstance, doc_string: StringList) -> None Function that parses docstring to data structures and adds to instance","title":"add_docstring_to_instance"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_8","text":"Parameter Type Doc instance ItemInstance current instance doc_string list of str Current instance's docstring as list of lines","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#grab_module_instance","text":"def grab_module_instance(file_contents: StringList, file_name: str, parent_package=None) -> InstanceList Function that generates complete instance object for module","title":"grab_module_instance"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_9","text":"Parameter Type Doc file_contents list of str Lines in python module file file_name str Name of the file or module parent_package=None str name of the parent package (if applicable)","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_5","text":"Return Variable Type Doc top_module_instance ModuleInstance module instance object at top level","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#conversionitem","text":"class ConversionItem Class representing single file to convert","title":"ConversionItem"},{"location":"scripts/npdoc2md/example/Npdoc2md/#attributes_2","text":"Attribute Type Doc parent_package str Parent package for file (if applicable) file_path os.PathLike Source file path file_name str Source file name md_file_name str Output markdown file name converted_markdown str Markdown for the module module_instance ModuleInstance Converted module instance","title":"Attributes"},{"location":"scripts/npdoc2md/example/Npdoc2md/#methods_3","text":"Method Doc collect_docstrings Collects docstrings from file generate_markdown Generates markdown for file","title":"Methods"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_5","text":"def __init__(self, file_path: os.PathLike, parent_package: str=None) Constructor for conversion item class","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#collect_docstrings","text":"def collect_docstrings(self) -> None Collects docstrings from file","title":"collect_docstrings"},{"location":"scripts/npdoc2md/example/Npdoc2md/#generate_markdown","text":"def generate_markdown(self) -> None Generates markdown for file","title":"generate_markdown"},{"location":"scripts/npdoc2md/example/Npdoc2md/#mdconverter","text":"class MDConverter Main Driver class for script","title":"MDConverter"},{"location":"scripts/npdoc2md/example/Npdoc2md/#attributes_3","text":"Attribute Type Doc conversion_item_list ConversionList list of items to convert output_loc os.PathLike Output location for markdown","title":"Attributes"},{"location":"scripts/npdoc2md/example/Npdoc2md/#methods_4","text":"Method Doc convert_doc_to_md Converts all docstrings to markdown generate_markdown_for_item Writes generated markdown to file execute_conversion_process Main driver function","title":"Methods"},{"location":"scripts/npdoc2md/example/Npdoc2md/#init_6","text":"def __init__(self, conversion_item_list: ConversionList, output_loc: os.PathLike) Constructor for MDConverter","title":"init"},{"location":"scripts/npdoc2md/example/Npdoc2md/#convert_doc_to_md","text":"def convert_doc_to_md(self, conversion_item: ConversionItem) -> None Converts docstrings to markdown internally","title":"convert_doc_to_md"},{"location":"scripts/npdoc2md/example/Npdoc2md/#generate_markdown_for_item","text":"def generate_markdown_for_item(self, conversion_item: ConversionItem) -> None Generates a markdown file for given conversion item","title":"generate_markdown_for_item"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_10","text":"Parameter Type Doc conversion_item ConversionItem Conversion item for which to create markdown file","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#execute_conversion_process","text":"def execute_conversion_process(self) -> None Main Driver function for converter","title":"execute_conversion_process"},{"location":"scripts/npdoc2md/example/Npdoc2md/#generate_conversion_item_list","text":"def generate_conversion_item_list(target: os.PathLike, ignore_list: StringList) -> ConversionList Generates list of all conversion items","title":"generate_conversion_item_list"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_11","text":"Parameter Type Doc target os.PathLike target of python module or package ignore_list list of str List of filenames to ignore","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_6","text":"Return Variable Type Doc conversion_item_list ConversionList List of all discovered files as conversion items","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#err_exit","text":"def err_exit(message: str, code: int) -> None Exits program with error","title":"err_exit"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_12","text":"Parameter Type Doc message str error message code int exit code","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#check_input_output_valid","text":"def check_input_output_valid(target: os.PathLike, output: os.PathLike, ignore_list: StringList) -> (bool, int, str) Checks if given input was valid","title":"check_input_output_valid"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parameters_13","text":"Parameter Type Doc target os.PathLike target input location output os.PathLike Markdown output location ignore_list list of str list of filenames to ignore","title":"Parameters"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_7","text":"Return Variable Type Doc valid bool True if valid, false otherwise err_code int Error code if applicable err_message str Error message if applicable","title":"Returns"},{"location":"scripts/npdoc2md/example/Npdoc2md/#parse_args","text":"def parse_args() -> (MDConverter, bool) Function that parses user arguments","title":"parse_args"},{"location":"scripts/npdoc2md/example/Npdoc2md/#returns_8","text":"Return Variable Type Doc converter MDConverter Main converter object debug bool toggle for debug printing","title":"Returns"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyautogit A command line interface for working with git written in python with the help of py_cui .","title":"Home"},{"location":"#pyautogit","text":"A command line interface for working with git written in python with the help of py_cui .","title":"pyautogit"},{"location":"about/","text":"About pyautogit Author(s) Jakub Wlodek - Creator, Maintainer Contributor(s) License BSD 3-Clause License Copyright (c) 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"About"},{"location":"about/#about-pyautogit","text":"","title":"About pyautogit"},{"location":"about/#authors","text":"Jakub Wlodek - Creator, Maintainer","title":"Author(s)"},{"location":"about/#contributors","text":"","title":"Contributor(s)"},{"location":"about/#license","text":"BSD 3-Clause License Copyright (c) 2020, Jakub Wlodek All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"install/","text":"pyautogit Installation An obvious prerequisit to installing pyautogit is to have git installed an in your system path. Once this is done, you may install the module. To install pyautogit , it is recommended to use pip : pip install pyautogit This will also install py_cui , the Command Line UI builder library upon which the project is based, and windows-curses on windows systems, which is required for py_cui on windows machines. Alternatively, you can install from source. Clone this repository and use pip to install: git clone https://github.com/jwlodek/pyautogit cd pyautogit pip install . If pyautogit is already installed and you would like to update it, use: pip install --upgrade pyautogit or cd pyautogit git pull pip install --upgrade . if updating a local version. Note that you may require root access for installing with pip depending on your system's python configuration.","title":"Installation"},{"location":"install/#pyautogit-installation","text":"An obvious prerequisit to installing pyautogit is to have git installed an in your system path. Once this is done, you may install the module. To install pyautogit , it is recommended to use pip : pip install pyautogit This will also install py_cui , the Command Line UI builder library upon which the project is based, and windows-curses on windows systems, which is required for py_cui on windows machines. Alternatively, you can install from source. Clone this repository and use pip to install: git clone https://github.com/jwlodek/pyautogit cd pyautogit pip install . If pyautogit is already installed and you would like to update it, use: pip install --upgrade pyautogit or cd pyautogit git pull pip install --upgrade . if updating a local version. Note that you may require root access for installing with pip depending on your system's python configuration.","title":"pyautogit Installation"},{"location":"repo_control/","text":"Repository Control Screen This documentation page is incomplete, you could help by expanding it.","title":"Repo Control Screen"},{"location":"repo_control/#repository-control-screen","text":"This documentation page is incomplete, you could help by expanding it.","title":"Repository Control Screen"},{"location":"repo_select/","text":"Repository Selection Screen This documentation page is incomplete, you could help by expanding it.","title":"Repo Select Screen"},{"location":"repo_select/#repository-selection-screen","text":"This documentation page is incomplete, you could help by expanding it.","title":"Repository Selection Screen"},{"location":"usage/","text":"Usage Once pyautogit is installed, open a command line client (note that Windows Terminal is not supported), then navigate to a directory and type: pyautogit You can also specify an external directory: pyautogit -w /home/jwlodek/repos If you open pyautogit in a directory that contains a .git folder, it will treat it as a repository, while if it cannot find said folder, the target location will be treated as a workspace. Repository Screen From the repository screen, you manage the local opened repository. You may create commits, tags, push and pull, and manage branches. For more detailed information on using the Repository Screen, please check the documentation. Workspace Screen The workspace screen allows for managing multiple git repositories at once. From here, all subdirectories that are identified as git repositories are listed, and you may open their respectiver repository screens. Also, you may clone new repositories, as well as create new blank repositories. Credential Management When an action is performed that requires credentials (ex. git push), pyautogit will ask for your git remote username and password. These are then stored as environment variables for the running process, and are used with git askpass to perform operations. As a result, if you open an editor after credentials are entered (ex. VSCode), and use the integrated terminal to process git commands, you will not have to enter credentials again. Credentials are stored only for the duration the window is open, and must be re-entered after each restart.","title":"Basic Usage"},{"location":"usage/#usage","text":"Once pyautogit is installed, open a command line client (note that Windows Terminal is not supported), then navigate to a directory and type: pyautogit You can also specify an external directory: pyautogit -w /home/jwlodek/repos If you open pyautogit in a directory that contains a .git folder, it will treat it as a repository, while if it cannot find said folder, the target location will be treated as a workspace.","title":"Usage"},{"location":"usage/#repository-screen","text":"From the repository screen, you manage the local opened repository. You may create commits, tags, push and pull, and manage branches. For more detailed information on using the Repository Screen, please check the documentation.","title":"Repository Screen"},{"location":"usage/#workspace-screen","text":"The workspace screen allows for managing multiple git repositories at once. From here, all subdirectories that are identified as git repositories are listed, and you may open their respectiver repository screens. Also, you may clone new repositories, as well as create new blank repositories.","title":"Workspace Screen"},{"location":"usage/#credential-management","text":"When an action is performed that requires credentials (ex. git push), pyautogit will ask for your git remote username and password. These are then stored as environment variables for the running process, and are used with git askpass to perform operations. As a result, if you open an editor after credentials are entered (ex. VSCode), and use the integrated terminal to process git commands, you will not have to enter credentials again. Credentials are stored only for the duration the window is open, and must be re-entered after each restart.","title":"Credential Management"},{"location":"DocstringGenerated/Commands/","text":"File containing all definitions and functions for git commands used by pyautogit This file should remain separate from the CUI interface. Author: Jakub Wlodek Created: 01-Oct-2019","title":"Commands"},{"location":"DocstringGenerated/Commands/#file-containing-all-definitions-and-functions-for-git-commands-used-by-pyautogit","text":"This file should remain separate from the CUI interface. Author: Jakub Wlodek Created: 01-Oct-2019","title":"File containing all definitions and functions for git commands used by pyautogit"},{"location":"DocstringGenerated/PyAutogitManager/","text":"File containing entry point for pyautogit, as well as a top level class for managing the program It also contains some helper functions and argument parsing. Author: Jakub Wlodek Created: 01-Oct-2019 PyAutogitManager class PyAutogitManager Main pyautogit manager class. Controls all operations of CU. Attributes Type Doc root PyCUI The root py_cui window target_path str The path to the workspace directory save_metadata bool Flag to specify metadata saving or not credentials list of str Username and Password for git remote current_state str Current state of pyautogit (repo control or repo select) default_editor str Command to open external editor post_input_callback no-arg or lambda function Function fired after a user input event operation_thread Thread A thread for performing async operations. Starts as None, Thread created as needed repos list of str List of repositories found in workspace repo_select_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo select screen repo_menu py_cui.widgets.ScrollMenu The repository select menu in the repo select screen git_status_box py_cui.widgets.ScrolledTextBlock Main info panel for repo select screen current_status_box py_cui.widgets.ScrolledTextBlock Secondary info panel for repo select screen clone_new_box py_cui.widgets.TextBox Textbox for cloning new repositories create_new_box py_cui.widgets.TextBox Textbox for creating new repositories repo_select_manager RepoSelectManager The manager wrapper class for the repo select screen repo_control_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo control screen add_files_menu py_cui.widgets.ScrollMenu Menu for adding/unstaging files remotes_menu py_cui.widgets.ScrollMenu Menu for selecting remotes branch_menu py_cui.widgets.ScrollMenu Menu for selecting branches commits_menu py_cui.widgets.ScrollMenu Menu listing most recent commits info_text_block py_cui.widgets.ScrolledTextBlock Main Info text block in repo control screen new_branch_textbox py_cui.widgets.TextBox Textbox for creating new branches commit_message_box py_cui.widgets.TextBox Textbox for entering new commit messages repo_control_manager RepoControlManager Manager wrapper for repo control screen.","title":"File containing entry point for pyautogit, as well as a top level class for managing the program"},{"location":"DocstringGenerated/PyAutogitManager/#file-containing-entry-point-for-pyautogit-as-well-as-a-top-level-class-for-managing-the-program","text":"It also contains some helper functions and argument parsing. Author: Jakub Wlodek Created: 01-Oct-2019","title":"File containing entry point for pyautogit, as well as a top level class for managing the program"},{"location":"DocstringGenerated/PyAutogitManager/#pyautogitmanager","text":"class PyAutogitManager Main pyautogit manager class. Controls all operations of CU. Attributes Type Doc root PyCUI The root py_cui window target_path str The path to the workspace directory save_metadata bool Flag to specify metadata saving or not credentials list of str Username and Password for git remote current_state str Current state of pyautogit (repo control or repo select) default_editor str Command to open external editor post_input_callback no-arg or lambda function Function fired after a user input event operation_thread Thread A thread for performing async operations. Starts as None, Thread created as needed repos list of str List of repositories found in workspace repo_select_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo select screen repo_menu py_cui.widgets.ScrollMenu The repository select menu in the repo select screen git_status_box py_cui.widgets.ScrolledTextBlock Main info panel for repo select screen current_status_box py_cui.widgets.ScrolledTextBlock Secondary info panel for repo select screen clone_new_box py_cui.widgets.TextBox Textbox for cloning new repositories create_new_box py_cui.widgets.TextBox Textbox for creating new repositories repo_select_manager RepoSelectManager The manager wrapper class for the repo select screen repo_control_widget_set py_cui.widget_set.WidgetSet set of py_cui widgets that are parts of the repo control screen add_files_menu py_cui.widgets.ScrollMenu Menu for adding/unstaging files remotes_menu py_cui.widgets.ScrollMenu Menu for selecting remotes branch_menu py_cui.widgets.ScrollMenu Menu for selecting branches commits_menu py_cui.widgets.ScrollMenu Menu listing most recent commits info_text_block py_cui.widgets.ScrolledTextBlock Main Info text block in repo control screen new_branch_textbox py_cui.widgets.TextBox Textbox for creating new branches commit_message_box py_cui.widgets.TextBox Textbox for entering new commit messages repo_control_manager RepoControlManager Manager wrapper for repo control screen.","title":"PyAutogitManager"},{"location":"DocstringGenerated/RepoControl/","text":"File containing functions used by the repository specific CUI screen This file is meant to handle the intermediate considerations between the CUI and the underlying git commands found in pyautogit.commands Author: Jakub Wlodek Created: 01-Oct-2019 RepoControlManager class RepoControlManager(pyautogit.screen_manager.ScreenManager) Class responsible for managing functions for the repository control screen. This class contains functions that are used by pyautogit for individual repository control. It provides the interface between the CUI widgets for the repository control screen and the pyautogit.commands module. Attributes Type Doc menu_choices list of str Overriden list of menu choices accessible from the repository control menu Methods method Doc process_menu_selection Override of base class, executes based on user menu selectio. initialize_screen_elements Function that refreshes a git repository statu. get_repo_status_short Gets shorthand repository statu. get_repo_remotes Gets list of repository remote. get_repo_branches Gets list of repository branche. show_remote_info Gets info about remot. show_commit_info Gets info about a particular commi. get_recent_commits Gets list of recent commits to branc. create_new_tag Creates a new ta. show_log Displays the git lo. stash_all_changes Stashes all repo change. unstash_all_changes Pops the stas. open_git_diff Opens current git diff stat. open_git_diff_file Gets the diff for a selected fil. open_editor Opens an external editor if selecte. open_editor_file Opens an external editor for a selected fil. add_all_changes Adds all changes to stagin. add_revert_file Adds/Reverts single file from stagin. ask_new_remote_name Opens text box to enter new remote nam. ask_new_remote_url Opens text box to ask new remote ur. add_remote Adds remote to git rep. delete_remote Deletes selected remote from local rep. rename_remote Renames selected remote from local rep. commit Commits currently staged item. pull_repo_branch Pulls from remot. push_repo_branch Pushes to remot. create_new_branch Creates new branch for repositor. checkout_branch Checks out specified branc. merge_branches Merges selected branch into the currently checked out branc. revert_merge Undos the merge that was just performe. checkout_commit Checks out specified commi. process_menu_selection process_menu_selection(selection) Override of base class, executes based on user menu selectio. Parameters Type Doc selection str User selection from menu initialize_screen_elements initialize_screen_elements() Function that refreshes a git repository statu. get_repo_status_short get_repo_status_short() Gets shorthand repository statu. get_repo_remotes get_repo_remotes() Gets list of repository remote. get_repo_branches get_repo_branches() Gets list of repository branche. show_remote_info show_remote_info() Gets info about remot. show_commit_info show_commit_info() Gets info about a particular commi. get_recent_commits get_recent_commits() Gets list of recent commits to branc. create_new_tag create_new_tag() Creates a new ta. show_log show_log() Displays the git lo. stash_all_changes stash_all_changes() Stashes all repo change. unstash_all_changes unstash_all_changes() Pops the stas. open_git_diff open_git_diff() Opens current git diff stat. open_git_diff_file open_git_diff_file() Gets the diff for a selected fil. open_editor open_editor(file=None) Opens an external editor if selecte. open_editor_file open_editor_file() Opens an external editor for a selected fil. add_all_changes add_all_changes() Adds all changes to stagin. add_revert_file add_revert_file() Adds/Reverts single file from stagin. ask_new_remote_name ask_new_remote_name() Opens text box to enter new remote nam. ask_new_remote_url ask_new_remote_url(remote_name) Opens text box to ask new remote ur. Parameters Type Doc remote_name str Remote name entered in previous textbox add_remote add_remote(remote_url) Adds remote to git rep. Parameters Type Doc remote_url str URL entered by user delete_remote delete_remote() Deletes selected remote from local rep. rename_remote rename_remote() Renames selected remote from local rep. commit commit() Commits currently staged item. pull_repo_branch pull_repo_branch() Pulls from remot. push_repo_branch push_repo_branch() Pushes to remot. create_new_branch create_new_branch() Creates new branch for repositor. checkout_branch checkout_branch() Checks out specified branc. merge_branches merge_branches() Merges selected branch into the currently checked out branc. revert_merge revert_merge() Undos the merge that was just performe. checkout_commit checkout_commit() Checks out specified commi.","title":"Repo Control"},{"location":"DocstringGenerated/RepoControl/#file-containing-functions-used-by-the-repository-specific-cui-screen","text":"This file is meant to handle the intermediate considerations between the CUI and the underlying git commands found in pyautogit.commands Author: Jakub Wlodek Created: 01-Oct-2019","title":"File containing functions used by the repository specific CUI screen"},{"location":"DocstringGenerated/RepoControl/#repocontrolmanager","text":"class RepoControlManager(pyautogit.screen_manager.ScreenManager) Class responsible for managing functions for the repository control screen. This class contains functions that are used by pyautogit for individual repository control. It provides the interface between the CUI widgets for the repository control screen and the pyautogit.commands module. Attributes Type Doc menu_choices list of str Overriden list of menu choices accessible from the repository control menu","title":"RepoControlManager"},{"location":"DocstringGenerated/RepoControl/#methods","text":"method Doc process_menu_selection Override of base class, executes based on user menu selectio. initialize_screen_elements Function that refreshes a git repository statu. get_repo_status_short Gets shorthand repository statu. get_repo_remotes Gets list of repository remote. get_repo_branches Gets list of repository branche. show_remote_info Gets info about remot. show_commit_info Gets info about a particular commi. get_recent_commits Gets list of recent commits to branc. create_new_tag Creates a new ta. show_log Displays the git lo. stash_all_changes Stashes all repo change. unstash_all_changes Pops the stas. open_git_diff Opens current git diff stat. open_git_diff_file Gets the diff for a selected fil. open_editor Opens an external editor if selecte. open_editor_file Opens an external editor for a selected fil. add_all_changes Adds all changes to stagin. add_revert_file Adds/Reverts single file from stagin. ask_new_remote_name Opens text box to enter new remote nam. ask_new_remote_url Opens text box to ask new remote ur. add_remote Adds remote to git rep. delete_remote Deletes selected remote from local rep. rename_remote Renames selected remote from local rep. commit Commits currently staged item. pull_repo_branch Pulls from remot. push_repo_branch Pushes to remot. create_new_branch Creates new branch for repositor. checkout_branch Checks out specified branc. merge_branches Merges selected branch into the currently checked out branc. revert_merge Undos the merge that was just performe. checkout_commit Checks out specified commi.","title":"Methods"},{"location":"DocstringGenerated/RepoControl/#process_menu_selection","text":"process_menu_selection(selection) Override of base class, executes based on user menu selectio. Parameters Type Doc selection str User selection from menu","title":"process_menu_selection"},{"location":"DocstringGenerated/RepoControl/#initialize_screen_elements","text":"initialize_screen_elements() Function that refreshes a git repository statu.","title":"initialize_screen_elements"},{"location":"DocstringGenerated/RepoControl/#get_repo_status_short","text":"get_repo_status_short() Gets shorthand repository statu.","title":"get_repo_status_short"},{"location":"DocstringGenerated/RepoControl/#get_repo_remotes","text":"get_repo_remotes() Gets list of repository remote.","title":"get_repo_remotes"},{"location":"DocstringGenerated/RepoControl/#get_repo_branches","text":"get_repo_branches() Gets list of repository branche.","title":"get_repo_branches"},{"location":"DocstringGenerated/RepoControl/#show_remote_info","text":"show_remote_info() Gets info about remot.","title":"show_remote_info"},{"location":"DocstringGenerated/RepoControl/#show_commit_info","text":"show_commit_info() Gets info about a particular commi.","title":"show_commit_info"},{"location":"DocstringGenerated/RepoControl/#get_recent_commits","text":"get_recent_commits() Gets list of recent commits to branc.","title":"get_recent_commits"},{"location":"DocstringGenerated/RepoControl/#create_new_tag","text":"create_new_tag() Creates a new ta.","title":"create_new_tag"},{"location":"DocstringGenerated/RepoControl/#show_log","text":"show_log() Displays the git lo.","title":"show_log"},{"location":"DocstringGenerated/RepoControl/#stash_all_changes","text":"stash_all_changes() Stashes all repo change.","title":"stash_all_changes"},{"location":"DocstringGenerated/RepoControl/#unstash_all_changes","text":"unstash_all_changes() Pops the stas.","title":"unstash_all_changes"},{"location":"DocstringGenerated/RepoControl/#open_git_diff","text":"open_git_diff() Opens current git diff stat.","title":"open_git_diff"},{"location":"DocstringGenerated/RepoControl/#open_git_diff_file","text":"open_git_diff_file() Gets the diff for a selected fil.","title":"open_git_diff_file"},{"location":"DocstringGenerated/RepoControl/#open_editor","text":"open_editor(file=None) Opens an external editor if selecte.","title":"open_editor"},{"location":"DocstringGenerated/RepoControl/#open_editor_file","text":"open_editor_file() Opens an external editor for a selected fil.","title":"open_editor_file"},{"location":"DocstringGenerated/RepoControl/#add_all_changes","text":"add_all_changes() Adds all changes to stagin.","title":"add_all_changes"},{"location":"DocstringGenerated/RepoControl/#add_revert_file","text":"add_revert_file() Adds/Reverts single file from stagin.","title":"add_revert_file"},{"location":"DocstringGenerated/RepoControl/#ask_new_remote_name","text":"ask_new_remote_name() Opens text box to enter new remote nam.","title":"ask_new_remote_name"},{"location":"DocstringGenerated/RepoControl/#ask_new_remote_url","text":"ask_new_remote_url(remote_name) Opens text box to ask new remote ur. Parameters Type Doc remote_name str Remote name entered in previous textbox","title":"ask_new_remote_url"},{"location":"DocstringGenerated/RepoControl/#add_remote","text":"add_remote(remote_url) Adds remote to git rep. Parameters Type Doc remote_url str URL entered by user","title":"add_remote"},{"location":"DocstringGenerated/RepoControl/#delete_remote","text":"delete_remote() Deletes selected remote from local rep.","title":"delete_remote"},{"location":"DocstringGenerated/RepoControl/#rename_remote","text":"rename_remote() Renames selected remote from local rep.","title":"rename_remote"},{"location":"DocstringGenerated/RepoControl/#commit","text":"commit() Commits currently staged item.","title":"commit"},{"location":"DocstringGenerated/RepoControl/#pull_repo_branch","text":"pull_repo_branch() Pulls from remot.","title":"pull_repo_branch"},{"location":"DocstringGenerated/RepoControl/#push_repo_branch","text":"push_repo_branch() Pushes to remot.","title":"push_repo_branch"},{"location":"DocstringGenerated/RepoControl/#create_new_branch","text":"create_new_branch() Creates new branch for repositor.","title":"create_new_branch"},{"location":"DocstringGenerated/RepoControl/#checkout_branch","text":"checkout_branch() Checks out specified branc.","title":"checkout_branch"},{"location":"DocstringGenerated/RepoControl/#merge_branches","text":"merge_branches() Merges selected branch into the currently checked out branc.","title":"merge_branches"},{"location":"DocstringGenerated/RepoControl/#revert_merge","text":"revert_merge() Undos the merge that was just performe.","title":"revert_merge"},{"location":"DocstringGenerated/RepoControl/#checkout_commit","text":"checkout_commit() Checks out specified commi.","title":"checkout_commit"},{"location":"DocstringGenerated/RepoSelect/","text":"Manager implementation for CUI screen for selecting different repositories RepoSelectManager class RepoSelectManager(pyautogit.screen_manager.ScreenManager) Class representing the manager for the repo select scree. Attributes Type Doc menu_choices list of str Overriden attribute from base class with expanded menu choices. Methods method Doc process_menu_selection Override of base class, executes depending on menu selectio. initialize_screen_elements Function that refreshes the repositories in the selection scree. ask_delete_repo Function that asks user for confirmation for repo deletio. delete_repo Function that deletes a rep. show_repo_status Function that shows the current repository statu. clone_new_repo Function that clones new repo from given UR. create_new_repo Function that creates a new repo with a given nam. process_menu_selection process_menu_selection(selection) Override of base class, executes depending on menu selectio. Parameters Type Doc selection str The user's menu selection initialize_screen_elements initialize_screen_elements() Function that refreshes the repositories in the selection scree. ask_delete_repo ask_delete_repo() Function that asks user for confirmation for repo deletio. delete_repo delete_repo(to_delete) Function that deletes a rep. Parameters Type Doc to_delete bool User's response of request for confirmation of deletion show_repo_status show_repo_status() Function that shows the current repository statu. clone_new_repo clone_new_repo() Function that clones new repo from given UR. create_new_repo create_new_repo() Function that creates a new repo with a given nam.","title":"Repo Select"},{"location":"DocstringGenerated/RepoSelect/#manager-implementation-for-cui-screen-for-selecting-different-repositories","text":"","title":"Manager implementation for CUI screen for selecting different repositories"},{"location":"DocstringGenerated/RepoSelect/#reposelectmanager","text":"class RepoSelectManager(pyautogit.screen_manager.ScreenManager) Class representing the manager for the repo select scree. Attributes Type Doc menu_choices list of str Overriden attribute from base class with expanded menu choices.","title":"RepoSelectManager"},{"location":"DocstringGenerated/RepoSelect/#methods","text":"method Doc process_menu_selection Override of base class, executes depending on menu selectio. initialize_screen_elements Function that refreshes the repositories in the selection scree. ask_delete_repo Function that asks user for confirmation for repo deletio. delete_repo Function that deletes a rep. show_repo_status Function that shows the current repository statu. clone_new_repo Function that clones new repo from given UR. create_new_repo Function that creates a new repo with a given nam.","title":"Methods"},{"location":"DocstringGenerated/RepoSelect/#process_menu_selection","text":"process_menu_selection(selection) Override of base class, executes depending on menu selectio. Parameters Type Doc selection str The user's menu selection","title":"process_menu_selection"},{"location":"DocstringGenerated/RepoSelect/#initialize_screen_elements","text":"initialize_screen_elements() Function that refreshes the repositories in the selection scree.","title":"initialize_screen_elements"},{"location":"DocstringGenerated/RepoSelect/#ask_delete_repo","text":"ask_delete_repo() Function that asks user for confirmation for repo deletio.","title":"ask_delete_repo"},{"location":"DocstringGenerated/RepoSelect/#delete_repo","text":"delete_repo(to_delete) Function that deletes a rep. Parameters Type Doc to_delete bool User's response of request for confirmation of deletion","title":"delete_repo"},{"location":"DocstringGenerated/RepoSelect/#show_repo_status","text":"show_repo_status() Function that shows the current repository statu.","title":"show_repo_status"},{"location":"DocstringGenerated/RepoSelect/#clone_new_repo","text":"clone_new_repo() Function that clones new repo from given UR.","title":"clone_new_repo"},{"location":"DocstringGenerated/RepoSelect/#create_new_repo","text":"create_new_repo() Function that creates a new repo with a given nam.","title":"create_new_repo"},{"location":"DocstringGenerated/ScreenManager/","text":"File containing class that acts as a parent class to all sub-screen manager ScreenManager class ScreenManager Main parent screen manager class. Contains common functionality for showing command results, handling credentials, commands, and long operations. Attributes Type Doc manager PyAutogitManager Driver engine manager message str A variable to store messages accross functions status int A variable to store status codes accross functions utility_var obj A variable that can be used to store any data across functions menu_choices list of str Overriden by children, list of options that pop up in menu info_panel py_cui.widgets.TextBlock The main textblock on the screen, used to display status information. Methods method Doc initialize_screen_elements Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object. process_menu_selection Processes based on selection returned from the men. show_menu Opens the menu using the menu item list for screen manager instanc. show_command_result Function that displays the result of stdout/err for an external command. show_status_long_op Shows the status of a long(async) operation on success completio. refresh_status Function that is fired after each git operation. Implement in subclasses. clear_elements Function that clears entries from widgets for reus. set_initial_values Function that sets initial values for widgets in scree. handle_user_command Handles custom user command. ask_custom_command Function that prompts user to enter custom comman. execute_long_operation Wrapper function that allows for executing long operations w/ credential requirements. initialize_screen_elements initialize_screen_elements() Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object. process_menu_selection process_menu_selection(selection) Processes based on selection returned from the men. Parameters Type Doc selection str An element of the self.menu_choices list selected by user show_menu show_menu() Opens the menu using the menu item list for screen manager instanc. show_command_result show_command_result(out, err, show_on_success = True, command_name='Command', success_message='Success', error_message='Error') Function that displays the result of stdout/err for an external command. Parameters Type Doc out str stdout string from command err str stderr string from command show_on_success bool Set to false to show no messages on success. (ex. git log doesnt need success message) command_name str name of command run. success_message str message to show on successful completion error_message str message to show on unsuccessful completion show_status_long_op show_status_long_op(name='Command', succ_message=\"Success\", err_message = \"Error\") Shows the status of a long(async) operation on success completio. Parameters Type Doc name str name of command run. succ_message str message to show on successful completion err_message str message to show on unsuccessful completion refresh_status refresh_status() Function that is fired after each git operation. Implement in subclasses. clear_elements clear_elements() Function that clears entries from widgets for reus. set_initial_values set_initial_values() Function that sets initial values for widgets in scree. handle_user_command handle_user_command(command) Handles custom user command. Parameters Type Doc command str The string command entered by the user ask_custom_command ask_custom_command() Function that prompts user to enter custom comman. execute_long_operation execute_long_operation(loading_messge, long_op_function, credentials_required=False) Wrapper function that allows for executing long operations w/ credential requirements. Parameters Type Doc loading_message str Message displayed while async op is performed long_op_function no-arg or lambda function Function that is fired in an async second thread credentials_required bool If true, prompts to enter credentials before starting async op","title":"Screen Manager"},{"location":"DocstringGenerated/ScreenManager/#file-containing-class-that-acts-as-a-parent-class-to-all-sub-screen-manager","text":"","title":"File containing class that acts as a parent class to all sub-screen manager"},{"location":"DocstringGenerated/ScreenManager/#screenmanager","text":"class ScreenManager Main parent screen manager class. Contains common functionality for showing command results, handling credentials, commands, and long operations. Attributes Type Doc manager PyAutogitManager Driver engine manager message str A variable to store messages accross functions status int A variable to store status codes accross functions utility_var obj A variable that can be used to store any data across functions menu_choices list of str Overriden by children, list of options that pop up in menu info_panel py_cui.widgets.TextBlock The main textblock on the screen, used to display status information.","title":"ScreenManager"},{"location":"DocstringGenerated/ScreenManager/#methods","text":"method Doc initialize_screen_elements Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object. process_menu_selection Processes based on selection returned from the men. show_menu Opens the menu using the menu item list for screen manager instanc. show_command_result Function that displays the result of stdout/err for an external command. show_status_long_op Shows the status of a long(async) operation on success completio. refresh_status Function that is fired after each git operation. Implement in subclasses. clear_elements Function that clears entries from widgets for reus. set_initial_values Function that sets initial values for widgets in scree. handle_user_command Handles custom user command. ask_custom_command Function that prompts user to enter custom comman. execute_long_operation Wrapper function that allows for executing long operations w/ credential requirements.","title":"Methods"},{"location":"DocstringGenerated/ScreenManager/#initialize_screen_elements","text":"initialize_screen_elements() Function that must be overridden by subscreen. Creates py_cui_widgets, returns widget set object.","title":"initialize_screen_elements"},{"location":"DocstringGenerated/ScreenManager/#process_menu_selection","text":"process_menu_selection(selection) Processes based on selection returned from the men. Parameters Type Doc selection str An element of the self.menu_choices list selected by user","title":"process_menu_selection"},{"location":"DocstringGenerated/ScreenManager/#show_menu","text":"show_menu() Opens the menu using the menu item list for screen manager instanc.","title":"show_menu"},{"location":"DocstringGenerated/ScreenManager/#show_command_result","text":"show_command_result(out, err, show_on_success = True, command_name='Command', success_message='Success', error_message='Error') Function that displays the result of stdout/err for an external command. Parameters Type Doc out str stdout string from command err str stderr string from command show_on_success bool Set to false to show no messages on success. (ex. git log doesnt need success message) command_name str name of command run. success_message str message to show on successful completion error_message str message to show on unsuccessful completion","title":"show_command_result"},{"location":"DocstringGenerated/ScreenManager/#show_status_long_op","text":"show_status_long_op(name='Command', succ_message=\"Success\", err_message = \"Error\") Shows the status of a long(async) operation on success completio. Parameters Type Doc name str name of command run. succ_message str message to show on successful completion err_message str message to show on unsuccessful completion","title":"show_status_long_op"},{"location":"DocstringGenerated/ScreenManager/#refresh_status","text":"refresh_status() Function that is fired after each git operation. Implement in subclasses.","title":"refresh_status"},{"location":"DocstringGenerated/ScreenManager/#clear_elements","text":"clear_elements() Function that clears entries from widgets for reus.","title":"clear_elements"},{"location":"DocstringGenerated/ScreenManager/#set_initial_values","text":"set_initial_values() Function that sets initial values for widgets in scree.","title":"set_initial_values"},{"location":"DocstringGenerated/ScreenManager/#handle_user_command","text":"handle_user_command(command) Handles custom user command. Parameters Type Doc command str The string command entered by the user","title":"handle_user_command"},{"location":"DocstringGenerated/ScreenManager/#ask_custom_command","text":"ask_custom_command() Function that prompts user to enter custom comman.","title":"ask_custom_command"},{"location":"DocstringGenerated/ScreenManager/#execute_long_operation","text":"execute_long_operation(loading_messge, long_op_function, credentials_required=False) Wrapper function that allows for executing long operations w/ credential requirements. Parameters Type Doc loading_message str Message displayed while async op is performed long_op_function no-arg or lambda function Function that is fired in an async second thread credentials_required bool If true, prompts to enter credentials before starting async op","title":"execute_long_operation"},{"location":"scripts/markdoc/","text":"MarkDoc This piece of code can be used to convert NumPy-styled Python docstrings ( example ), such as those used in scikit-learn , to Markdown with minimum dependencies. In this way, only the code-contained documentation needs to be editted, and your documentation on for example readthedocs can be automatically updated thereafter with some configuration. Example The converted documentation for this particular code can be found here . Before Use The format assumes that your code (or at least your docstring documentation) is in line with the styleguides of both PEP8 and PEP257. There are two ways to go about making sure this is the case: Fast Just check the example here to get a quick overview of how the docstrings would have to look in order for them to parse correctly. Better The styleguides are incorporated into two libraries that can be used to check the Python files for style errors in terminal, like so: pip install pep8 pip install pep257 pep8 yourpythonfile.py pep257 yourpythonfile.py These are more conveniently implemented in linter plugins such as linter-pep8 and linter-pep257 for the linter package in Atom , and Flake8Lint for Sublime Text (and pretty much every other IDE). Usage First clone from GitHub: git clone https://www.github.com/cmry/markdoc To use the script within terminal, simply type: python3 markdoc.py /dir/to/somefile.py /dir/to/somedoc.md If you want to automatically generate a bunch of documentation and are not comfortable with writing .sh scripts, you can use the code in Python as well: from markdoc import MarkDoc md = MarkDoc('/dir/to/somefile.py', '/dir/to/somedoc.md') You can access the converted markdown string in: # print markdown from class attribute print(md.markdown) The class runs itself on initialization (calls self.read ). If you do not want this, you can add cold=True to the class initialization, like so: md = MarkDoc('file.py', 'doc.md', cold=True) Planned Fixes Handle consecutive classes within the same file. Fix inherrited classes being handled correctly (no __init__ , no object ). Link class methods from table to their documentation. Might not handle decorators neatly. Docstring Issues Some caveats: Do not use \"\"\" for anything other than docstrings. First line of any docstring has to contain the first short title ( example ). Classes have to be structured new-style: class SomeClass(object): . Codeblocks in examples have to be vanilla Python ( >>> and ... ). Please do not use class as a parameter name! Notes Script has only been tested with Python 3.4 on Ubuntu.","title":"MarkDoc"},{"location":"scripts/markdoc/#markdoc","text":"This piece of code can be used to convert NumPy-styled Python docstrings ( example ), such as those used in scikit-learn , to Markdown with minimum dependencies. In this way, only the code-contained documentation needs to be editted, and your documentation on for example readthedocs can be automatically updated thereafter with some configuration.","title":"MarkDoc"},{"location":"scripts/markdoc/#example","text":"The converted documentation for this particular code can be found here .","title":"Example"},{"location":"scripts/markdoc/#before-use","text":"The format assumes that your code (or at least your docstring documentation) is in line with the styleguides of both PEP8 and PEP257. There are two ways to go about making sure this is the case:","title":"Before Use"},{"location":"scripts/markdoc/#fast","text":"Just check the example here to get a quick overview of how the docstrings would have to look in order for them to parse correctly.","title":"Fast"},{"location":"scripts/markdoc/#better","text":"The styleguides are incorporated into two libraries that can be used to check the Python files for style errors in terminal, like so: pip install pep8 pip install pep257 pep8 yourpythonfile.py pep257 yourpythonfile.py These are more conveniently implemented in linter plugins such as linter-pep8 and linter-pep257 for the linter package in Atom , and Flake8Lint for Sublime Text (and pretty much every other IDE).","title":"Better"},{"location":"scripts/markdoc/#usage","text":"First clone from GitHub: git clone https://www.github.com/cmry/markdoc To use the script within terminal, simply type: python3 markdoc.py /dir/to/somefile.py /dir/to/somedoc.md If you want to automatically generate a bunch of documentation and are not comfortable with writing .sh scripts, you can use the code in Python as well: from markdoc import MarkDoc md = MarkDoc('/dir/to/somefile.py', '/dir/to/somedoc.md') You can access the converted markdown string in: # print markdown from class attribute print(md.markdown) The class runs itself on initialization (calls self.read ). If you do not want this, you can add cold=True to the class initialization, like so: md = MarkDoc('file.py', 'doc.md', cold=True)","title":"Usage"},{"location":"scripts/markdoc/#planned-fixes","text":"Handle consecutive classes within the same file. Fix inherrited classes being handled correctly (no __init__ , no object ). Link class methods from table to their documentation. Might not handle decorators neatly.","title":"Planned Fixes"},{"location":"scripts/markdoc/#docstring-issues","text":"Some caveats: Do not use \"\"\" for anything other than docstrings. First line of any docstring has to contain the first short title ( example ). Classes have to be structured new-style: class SomeClass(object): . Codeblocks in examples have to be vanilla Python ( >>> and ... ). Please do not use class as a parameter name!","title":"Docstring Issues"},{"location":"scripts/markdoc/#notes","text":"Script has only been tested with Python 3.4 on Ubuntu.","title":"Notes"},{"location":"scripts/markdoc/markdoc/","text":"Docstring to Markdown This piece of code is used within Shed (https://www.github.com/cmry/shed) to convert sklearn-styled python docstrings to markdown. In this way, only the code documentation needs to be editted, and the readthedocs is automatically updated thereafter. To use it, simply type python3 markdoc.py somefile.py somedoc.md . Check class help for python usage. Don't forget to also check the class notes (they are important for docstring format guidelines). MarkDoc class MarkDoc(file_in, file_out, cold=False) Documentation to Markdown. This class converts a python file with properly formed sklearn-style docstrings to a markdown file that can be used in for example Readthedocs or jekyll. Parameters Type Doc file_in str Python (.py) file from where the docstrings should be taken. file_out str Markdown (.md) file where the documentation should be written. cold boolean, optional, default False If you want to start the class without starting the reader, set True. Attributes Type Doc markdown str The entire markdown file that will be appended to and written out. Examples Use of the package should just be from commandline with python3 markdoc.py in.py out.md . However, if for some reason it is required to load it as a class, you can just do: >>> from markdoc import MarkDoc >>> d2m = MarkDoc('some/dir/file.py', '/some/otherdir/doc.md') The string of the markdown can be accessed by: >>> print(d2m.markdown) Notes List of common errors and styleguide conflicts: list index out of range? \"\"\" used for non-docstring strings. First Class or method Documentation line has newline after \"\"\". Fix with: \"\"\"This is the first line. Here comes the rest. \"\"\" Class parameters not showing in code blocks? Class is not structed new-style (object after class). Code blocks not showing? Code is ipython style rather than vanilla (i.e. In [1]: instead of >>>). tuple index out of range? Mistake in var : type lists (for example var: type). Description also contains a :. some table parts are not showing? Probably included some seperators in there such as : or -----. methods are garbled? Did you name a parameter 'class' or any other matches? Methods method Doc read Open python code file, spit out markdown file. handle_classes Given class docs only, write out their docs and methods. find_declaration Find class Bla(object): or def method(params): across lines. structure_doc Produce a structured dictionary from docstring. md_title Handle title and text parts for main and class-specific. md_table Place parameters and attributes in a table overview. md_code_text Section text and/or code in the example part of the doc. md_class_method Replace class ...(object) with __init__ arguments. md_methods_doc Merge all method elements in one string. md_class_doc Merge all class section elements in one string. read read(file_in, file_out) Open python code file, spit out markdown file. handle_classes handle_classes(classes) Given class docs only, write out their docs and methods. find_declaration find_declaration(lines) Find class Bla(object): or def method(params): across lines. structure_doc structure_doc(doc) Produce a structured dictionary from docstring. The key is the part of the documentation (name, title, params, attributes, etc.), and value is a list of lines that make up this part. Is used to handle the order and different parses of different sections. Parameters Type Doc doc str Flat string structure of a docstring block. Returns Type Doc X_doc dict Class or method doc, a structure dict with section; lines. md_title md_title(title_part, class_line=False) Handle title and text parts for main and class-specific. Pretty convoluted but delicate method that seperates the top part that should not be part of the title docstring off the document, handles correct punctuation of titles, for both classes and methods. Also detects if there's a description under the first line. Parameters Type Doc title_part str Part of the document that starts with triple qutoes and is below any line seperators. class_line bool, optional, default False The first line of the docstring by default servers as a title header. However, for classes it should be formed into a normal description. Thefefore, the # marker is removed and a . is added. Returns Type Doc line_buffer str Correctly formated markdown from the buffer. md_table md_table(doc, name) Place parameters and attributes in a table overview. The documentation parts that are typed by 'var : type \\n description' can be splitted into a table. The same holds true for a list of class methods. These are handled by this method. Table structures are on the top of this python file. Parameters Type Doc doc str Flat string structure of a docstring block. name str Indicator for the table, can be for example Parameters or Attributes. Returns Type Doc table str Markdown-type table with filled rows and formatted name. md_code_text md_code_text(doc, name, flat=False) Section text and/or code in the example part of the doc. If some code related beginnings (>>>, ...) is founds buffer to code, else we regard it as text. Record order so that multiple consecutive blocks of text and code are possible. Parameters Type Doc doc str Flat string structure of a docstring block. name str Name of the section (Examples, Notes). flat bool, optional, default False If there are no code blocks, flat can be used to stop parsing them. Returns Type Doc code str Formatted block of fenced markdown code-snippets and flat text. Notes Please note that this method assumes markdown is uses so-called fenced codeblocks that are commonly accepted by Readthedocs, Github, Bitbucket, and Jekyll (for example with Redcarpet). This current implementation does NOT allow for ipython styled code examples. (In [1]: Out[1]: etc.) md_class_method md_class_method(doc, class_parts) Replace class ...(object) with __init__ arguments. In sklearn-style, each class is represented as it's name, along with the parameters accepted in __init__ as its parameters, as you would call the method in python. The markdown therefore needs to fill the (object) tag that is assigned to classes with the __init__ params. Parameters Type Doc doc str Flat string structure of a docstring block. class_parts list List with parts that the docstring constituted of. First line should be the class name and can therefore be replaced. Returns Type Doc doc str Same as doc, only now (object) has been replaced with __init__ parameters. Notes Please note that this implementation assumes you're using new-style class declarations where for example class SomeClass: should be written as class SomeClass(object): . md_methods_doc md_methods_doc(method_doc) Merge all method elements in one string. This method will scan each method docstring and extract parameters, returns and descriptions. It will append them to the method table and link them in the doc (TODO). Parameters Type Doc method_doc list Lower part of the class docstrings that holds a method docstring per entry. Returns Type Doc methods str Formatted markdown string with all method information. Notes On the bottom, dict calls are being done to order several parts of the docstring. If you use more than Parameters and Returns, please make sure they are added in the code there. md_class_doc md_class_doc(class_doc) Merge all class section elements in one string. This will piece together the descriptions contained in the docstring of the class. Currently, they are written below the top of the python file, and not put into any subfiles per class. Parameters Type Doc class_doc str Flat text containing the class docstring part. Returns Type Doc mark_doc str Markdown formatted class docstring, including all subsections. Notes On the bottom, dict calls are being done to order several parts of the docstring. If you use more than Parameters, Attributes, Examples, and Notes, please make sure they are added in the code there.","title":"Docstring to Markdown"},{"location":"scripts/markdoc/markdoc/#docstring-to-markdown","text":"This piece of code is used within Shed (https://www.github.com/cmry/shed) to convert sklearn-styled python docstrings to markdown. In this way, only the code documentation needs to be editted, and the readthedocs is automatically updated thereafter. To use it, simply type python3 markdoc.py somefile.py somedoc.md . Check class help for python usage. Don't forget to also check the class notes (they are important for docstring format guidelines).","title":"Docstring to Markdown"},{"location":"scripts/markdoc/markdoc/#markdoc","text":"class MarkDoc(file_in, file_out, cold=False) Documentation to Markdown. This class converts a python file with properly formed sklearn-style docstrings to a markdown file that can be used in for example Readthedocs or jekyll. Parameters Type Doc file_in str Python (.py) file from where the docstrings should be taken. file_out str Markdown (.md) file where the documentation should be written. cold boolean, optional, default False If you want to start the class without starting the reader, set True. Attributes Type Doc markdown str The entire markdown file that will be appended to and written out.","title":"MarkDoc"},{"location":"scripts/markdoc/markdoc/#examples","text":"Use of the package should just be from commandline with python3 markdoc.py in.py out.md . However, if for some reason it is required to load it as a class, you can just do: >>> from markdoc import MarkDoc >>> d2m = MarkDoc('some/dir/file.py', '/some/otherdir/doc.md') The string of the markdown can be accessed by: >>> print(d2m.markdown)","title":"Examples"},{"location":"scripts/markdoc/markdoc/#notes","text":"List of common errors and styleguide conflicts:","title":"Notes"},{"location":"scripts/markdoc/markdoc/#list-index-out-of-range","text":"\"\"\" used for non-docstring strings. First Class or method Documentation line has newline after \"\"\". Fix with: \"\"\"This is the first line. Here comes the rest. \"\"\"","title":"list index out of range?"},{"location":"scripts/markdoc/markdoc/#class-parameters-not-showing-in-code-blocks","text":"Class is not structed new-style (object after class).","title":"Class parameters not showing in code blocks?"},{"location":"scripts/markdoc/markdoc/#code-blocks-not-showing","text":"Code is ipython style rather than vanilla (i.e. In [1]: instead of >>>).","title":"Code blocks not showing?"},{"location":"scripts/markdoc/markdoc/#tuple-index-out-of-range","text":"Mistake in var : type lists (for example var: type). Description also contains a :.","title":"tuple index out of range?"},{"location":"scripts/markdoc/markdoc/#some-table-parts-are-not-showing","text":"Probably included some seperators in there such as : or -----.","title":"some table parts are not showing?"},{"location":"scripts/markdoc/markdoc/#methods-are-garbled","text":"Did you name a parameter 'class' or any other matches?","title":"methods are garbled?"},{"location":"scripts/markdoc/markdoc/#methods","text":"method Doc read Open python code file, spit out markdown file. handle_classes Given class docs only, write out their docs and methods. find_declaration Find class Bla(object): or def method(params): across lines. structure_doc Produce a structured dictionary from docstring. md_title Handle title and text parts for main and class-specific. md_table Place parameters and attributes in a table overview. md_code_text Section text and/or code in the example part of the doc. md_class_method Replace class ...(object) with __init__ arguments. md_methods_doc Merge all method elements in one string. md_class_doc Merge all class section elements in one string.","title":"Methods"},{"location":"scripts/markdoc/markdoc/#read","text":"read(file_in, file_out) Open python code file, spit out markdown file.","title":"read"},{"location":"scripts/markdoc/markdoc/#handle_classes","text":"handle_classes(classes) Given class docs only, write out their docs and methods.","title":"handle_classes"},{"location":"scripts/markdoc/markdoc/#find_declaration","text":"find_declaration(lines) Find class Bla(object): or def method(params): across lines.","title":"find_declaration"},{"location":"scripts/markdoc/markdoc/#structure_doc","text":"structure_doc(doc) Produce a structured dictionary from docstring. The key is the part of the documentation (name, title, params, attributes, etc.), and value is a list of lines that make up this part. Is used to handle the order and different parses of different sections. Parameters Type Doc doc str Flat string structure of a docstring block. Returns Type Doc X_doc dict Class or method doc, a structure dict with section; lines.","title":"structure_doc"},{"location":"scripts/markdoc/markdoc/#md_title","text":"md_title(title_part, class_line=False) Handle title and text parts for main and class-specific. Pretty convoluted but delicate method that seperates the top part that should not be part of the title docstring off the document, handles correct punctuation of titles, for both classes and methods. Also detects if there's a description under the first line. Parameters Type Doc title_part str Part of the document that starts with triple qutoes and is below any line seperators. class_line bool, optional, default False The first line of the docstring by default servers as a title header. However, for classes it should be formed into a normal description. Thefefore, the # marker is removed and a . is added. Returns Type Doc line_buffer str Correctly formated markdown from the buffer.","title":"md_title"},{"location":"scripts/markdoc/markdoc/#md_table","text":"md_table(doc, name) Place parameters and attributes in a table overview. The documentation parts that are typed by 'var : type \\n description' can be splitted into a table. The same holds true for a list of class methods. These are handled by this method. Table structures are on the top of this python file. Parameters Type Doc doc str Flat string structure of a docstring block. name str Indicator for the table, can be for example Parameters or Attributes. Returns Type Doc table str Markdown-type table with filled rows and formatted name.","title":"md_table"},{"location":"scripts/markdoc/markdoc/#md_code_text","text":"md_code_text(doc, name, flat=False) Section text and/or code in the example part of the doc. If some code related beginnings (>>>, ...) is founds buffer to code, else we regard it as text. Record order so that multiple consecutive blocks of text and code are possible. Parameters Type Doc doc str Flat string structure of a docstring block. name str Name of the section (Examples, Notes). flat bool, optional, default False If there are no code blocks, flat can be used to stop parsing them. Returns Type Doc code str Formatted block of fenced markdown code-snippets and flat text.","title":"md_code_text"},{"location":"scripts/markdoc/markdoc/#notes_1","text":"Please note that this method assumes markdown is uses so-called fenced codeblocks that are commonly accepted by Readthedocs, Github, Bitbucket, and Jekyll (for example with Redcarpet). This current implementation does NOT allow for ipython styled code examples. (In [1]: Out[1]: etc.)","title":"Notes"},{"location":"scripts/markdoc/markdoc/#md_class_method","text":"md_class_method(doc, class_parts) Replace class ...(object) with __init__ arguments. In sklearn-style, each class is represented as it's name, along with the parameters accepted in __init__ as its parameters, as you would call the method in python. The markdown therefore needs to fill the (object) tag that is assigned to classes with the __init__ params. Parameters Type Doc doc str Flat string structure of a docstring block. class_parts list List with parts that the docstring constituted of. First line should be the class name and can therefore be replaced. Returns Type Doc doc str Same as doc, only now (object) has been replaced with __init__ parameters.","title":"md_class_method"},{"location":"scripts/markdoc/markdoc/#notes_2","text":"Please note that this implementation assumes you're using new-style class declarations where for example class SomeClass: should be written as class SomeClass(object): .","title":"Notes"},{"location":"scripts/markdoc/markdoc/#md_methods_doc","text":"md_methods_doc(method_doc) Merge all method elements in one string. This method will scan each method docstring and extract parameters, returns and descriptions. It will append them to the method table and link them in the doc (TODO). Parameters Type Doc method_doc list Lower part of the class docstrings that holds a method docstring per entry. Returns Type Doc methods str Formatted markdown string with all method information.","title":"md_methods_doc"},{"location":"scripts/markdoc/markdoc/#notes_3","text":"On the bottom, dict calls are being done to order several parts of the docstring. If you use more than Parameters and Returns, please make sure they are added in the code there.","title":"Notes"},{"location":"scripts/markdoc/markdoc/#md_class_doc","text":"md_class_doc(class_doc) Merge all class section elements in one string. This will piece together the descriptions contained in the docstring of the class. Currently, they are written below the top of the python file, and not put into any subfiles per class. Parameters Type Doc class_doc str Flat text containing the class docstring part. Returns Type Doc mark_doc str Markdown formatted class docstring, including all subsections.","title":"md_class_doc"},{"location":"scripts/markdoc/markdoc/#notes_4","text":"On the bottom, dict calls are being done to order several parts of the docstring. If you use more than Parameters, Attributes, Examples, and Notes, please make sure they are added in the code there.","title":"Notes"}]}